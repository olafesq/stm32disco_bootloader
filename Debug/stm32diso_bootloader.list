
stm32diso_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c4c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  08001dd4  08001dd4  00011dd4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080022dc  080022dc  000122dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080022e4  080022e4  000122e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080022e8  080022e8  000122e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  080022ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  8 .bss          000000a8  20000014  20000014  00020014  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000bc  200000bc  00020014  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 11 .debug_info   000102c9  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000279a  00000000  00000000  0003030d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002e77  00000000  00000000  00032aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000678  00000000  00000000  00035920  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000840  00000000  00000000  00035f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000414d  00000000  00000000  000367d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00002992  00000000  00000000  0003a925  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003d2b7  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000fc8  00000000  00000000  0003d334  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001dbc 	.word	0x08001dbc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08001dbc 	.word	0x08001dbc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b97a 	b.w	80004e4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	468c      	mov	ip, r1
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	9e08      	ldr	r6, [sp, #32]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d151      	bne.n	80002bc <__udivmoddi4+0xb4>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d96d      	bls.n	80002fa <__udivmoddi4+0xf2>
 800021e:	fab2 fe82 	clz	lr, r2
 8000222:	f1be 0f00 	cmp.w	lr, #0
 8000226:	d00b      	beq.n	8000240 <__udivmoddi4+0x38>
 8000228:	f1ce 0c20 	rsb	ip, lr, #32
 800022c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000230:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000234:	fa02 f70e 	lsl.w	r7, r2, lr
 8000238:	ea4c 0c05 	orr.w	ip, ip, r5
 800023c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000240:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000244:	0c25      	lsrs	r5, r4, #16
 8000246:	fbbc f8fa 	udiv	r8, ip, sl
 800024a:	fa1f f987 	uxth.w	r9, r7
 800024e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000252:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000256:	fb08 f309 	mul.w	r3, r8, r9
 800025a:	42ab      	cmp	r3, r5
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x6c>
 800025e:	19ed      	adds	r5, r5, r7
 8000260:	f108 32ff 	add.w	r2, r8, #4294967295
 8000264:	f080 8123 	bcs.w	80004ae <__udivmoddi4+0x2a6>
 8000268:	42ab      	cmp	r3, r5
 800026a:	f240 8120 	bls.w	80004ae <__udivmoddi4+0x2a6>
 800026e:	f1a8 0802 	sub.w	r8, r8, #2
 8000272:	443d      	add	r5, r7
 8000274:	1aed      	subs	r5, r5, r3
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb5 f0fa 	udiv	r0, r5, sl
 800027c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000280:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000284:	fb00 f909 	mul.w	r9, r0, r9
 8000288:	45a1      	cmp	r9, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x98>
 800028c:	19e4      	adds	r4, r4, r7
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 810a 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 8000296:	45a1      	cmp	r9, r4
 8000298:	f240 8107 	bls.w	80004aa <__udivmoddi4+0x2a2>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	eba4 0409 	sub.w	r4, r4, r9
 80002a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a8:	2100      	movs	r1, #0
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	d061      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80002b2:	2300      	movs	r3, #0
 80002b4:	6034      	str	r4, [r6, #0]
 80002b6:	6073      	str	r3, [r6, #4]
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	428b      	cmp	r3, r1
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0xc8>
 80002c0:	2e00      	cmp	r6, #0
 80002c2:	d054      	beq.n	800036e <__udivmoddi4+0x166>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	f040 808e 	bne.w	80003f6 <__udivmoddi4+0x1ee>
 80002da:	42ab      	cmp	r3, r5
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xdc>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2d0>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb65 0503 	sbc.w	r5, r5, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	46ac      	mov	ip, r5
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d03f      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	b912      	cbnz	r2, 8000302 <__udivmoddi4+0xfa>
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000302:	fab7 fe87 	clz	lr, r7
 8000306:	f1be 0f00 	cmp.w	lr, #0
 800030a:	d134      	bne.n	8000376 <__udivmoddi4+0x16e>
 800030c:	1beb      	subs	r3, r5, r7
 800030e:	0c3a      	lsrs	r2, r7, #16
 8000310:	fa1f fc87 	uxth.w	ip, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb3 f8f2 	udiv	r8, r3, r2
 800031a:	0c25      	lsrs	r5, r4, #16
 800031c:	fb02 3318 	mls	r3, r2, r8, r3
 8000320:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000324:	fb0c f308 	mul.w	r3, ip, r8
 8000328:	42ab      	cmp	r3, r5
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x134>
 800032c:	19ed      	adds	r5, r5, r7
 800032e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x132>
 8000334:	42ab      	cmp	r3, r5
 8000336:	f200 80d1 	bhi.w	80004dc <__udivmoddi4+0x2d4>
 800033a:	4680      	mov	r8, r0
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb5 f0f2 	udiv	r0, r5, r2
 8000344:	fb02 5510 	mls	r5, r2, r0, r5
 8000348:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800034c:	fb0c fc00 	mul.w	ip, ip, r0
 8000350:	45a4      	cmp	ip, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x15c>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x15a>
 800035c:	45a4      	cmp	ip, r4
 800035e:	f200 80b8 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800036c:	e79d      	b.n	80002aa <__udivmoddi4+0xa2>
 800036e:	4631      	mov	r1, r6
 8000370:	4630      	mov	r0, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	f1ce 0420 	rsb	r4, lr, #32
 800037a:	fa05 f30e 	lsl.w	r3, r5, lr
 800037e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000382:	fa20 f804 	lsr.w	r8, r0, r4
 8000386:	0c3a      	lsrs	r2, r7, #16
 8000388:	fa25 f404 	lsr.w	r4, r5, r4
 800038c:	ea48 0803 	orr.w	r8, r8, r3
 8000390:	fbb4 f1f2 	udiv	r1, r4, r2
 8000394:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000398:	fb02 4411 	mls	r4, r2, r1, r4
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a4:	fb01 f30c 	mul.w	r3, r1, ip
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1bc>
 80003b0:	19ed      	adds	r5, r5, r7
 80003b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b6:	f080 808a 	bcs.w	80004ce <__udivmoddi4+0x2c6>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	f240 8087 	bls.w	80004ce <__udivmoddi4+0x2c6>
 80003c0:	3902      	subs	r1, #2
 80003c2:	443d      	add	r5, r7
 80003c4:	1aeb      	subs	r3, r5, r3
 80003c6:	fa1f f588 	uxth.w	r5, r8
 80003ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ce:	fb02 3310 	mls	r3, r2, r0, r3
 80003d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d6:	fb00 f30c 	mul.w	r3, r0, ip
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1e6>
 80003de:	19ed      	adds	r5, r5, r7
 80003e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e4:	d26f      	bcs.n	80004c6 <__udivmoddi4+0x2be>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d96d      	bls.n	80004c6 <__udivmoddi4+0x2be>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	1aeb      	subs	r3, r5, r3
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	e78f      	b.n	8000316 <__udivmoddi4+0x10e>
 80003f6:	f1c1 0720 	rsb	r7, r1, #32
 80003fa:	fa22 f807 	lsr.w	r8, r2, r7
 80003fe:	408b      	lsls	r3, r1
 8000400:	fa05 f401 	lsl.w	r4, r5, r1
 8000404:	ea48 0303 	orr.w	r3, r8, r3
 8000408:	fa20 fe07 	lsr.w	lr, r0, r7
 800040c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000410:	40fd      	lsrs	r5, r7
 8000412:	ea4e 0e04 	orr.w	lr, lr, r4
 8000416:	fbb5 f9fc 	udiv	r9, r5, ip
 800041a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000422:	fa1f f883 	uxth.w	r8, r3
 8000426:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800042a:	fb09 f408 	mul.w	r4, r9, r8
 800042e:	42ac      	cmp	r4, r5
 8000430:	fa02 f201 	lsl.w	r2, r2, r1
 8000434:	fa00 fa01 	lsl.w	sl, r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x244>
 800043a:	18ed      	adds	r5, r5, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d243      	bcs.n	80004ca <__udivmoddi4+0x2c2>
 8000442:	42ac      	cmp	r4, r5
 8000444:	d941      	bls.n	80004ca <__udivmoddi4+0x2c2>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	441d      	add	r5, r3
 800044c:	1b2d      	subs	r5, r5, r4
 800044e:	fa1f fe8e 	uxth.w	lr, lr
 8000452:	fbb5 f0fc 	udiv	r0, r5, ip
 8000456:	fb0c 5510 	mls	r5, ip, r0, r5
 800045a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45a0      	cmp	r8, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x26e>
 8000466:	18e4      	adds	r4, r4, r3
 8000468:	f100 35ff 	add.w	r5, r0, #4294967295
 800046c:	d229      	bcs.n	80004c2 <__udivmoddi4+0x2ba>
 800046e:	45a0      	cmp	r8, r4
 8000470:	d927      	bls.n	80004c2 <__udivmoddi4+0x2ba>
 8000472:	3802      	subs	r0, #2
 8000474:	441c      	add	r4, r3
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454c      	cmp	r4, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	464d      	mov	r5, r9
 8000488:	d315      	bcc.n	80004b6 <__udivmoddi4+0x2ae>
 800048a:	d012      	beq.n	80004b2 <__udivmoddi4+0x2aa>
 800048c:	b156      	cbz	r6, 80004a4 <__udivmoddi4+0x29c>
 800048e:	ebba 030e 	subs.w	r3, sl, lr
 8000492:	eb64 0405 	sbc.w	r4, r4, r5
 8000496:	fa04 f707 	lsl.w	r7, r4, r7
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431f      	orrs	r7, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	6037      	str	r7, [r6, #0]
 80004a2:	6074      	str	r4, [r6, #4]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	4618      	mov	r0, r3
 80004ac:	e6f8      	b.n	80002a0 <__udivmoddi4+0x98>
 80004ae:	4690      	mov	r8, r2
 80004b0:	e6e0      	b.n	8000274 <__udivmoddi4+0x6c>
 80004b2:	45c2      	cmp	sl, r8
 80004b4:	d2ea      	bcs.n	800048c <__udivmoddi4+0x284>
 80004b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ba:	eb69 0503 	sbc.w	r5, r9, r3
 80004be:	3801      	subs	r0, #1
 80004c0:	e7e4      	b.n	800048c <__udivmoddi4+0x284>
 80004c2:	4628      	mov	r0, r5
 80004c4:	e7d7      	b.n	8000476 <__udivmoddi4+0x26e>
 80004c6:	4640      	mov	r0, r8
 80004c8:	e791      	b.n	80003ee <__udivmoddi4+0x1e6>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e7be      	b.n	800044c <__udivmoddi4+0x244>
 80004ce:	4601      	mov	r1, r0
 80004d0:	e778      	b.n	80003c4 <__udivmoddi4+0x1bc>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	e745      	b.n	8000364 <__udivmoddi4+0x15c>
 80004d8:	4608      	mov	r0, r1
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xe6>
 80004dc:	f1a8 0802 	sub.w	r8, r8, #2
 80004e0:	443d      	add	r5, r7
 80004e2:	e72b      	b.n	800033c <__udivmoddi4+0x134>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004ea:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <HAL_InitTick+0x3c>)
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_InitTick+0x40>)
{
 80004ee:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004f0:	7818      	ldrb	r0, [r3, #0]
 80004f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004fa:	6810      	ldr	r0, [r2, #0]
 80004fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000500:	f000 f8a8 	bl	8000654 <HAL_SYSTICK_Config>
 8000504:	4604      	mov	r4, r0
 8000506:	b958      	cbnz	r0, 8000520 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000508:	2d0f      	cmp	r5, #15
 800050a:	d809      	bhi.n	8000520 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800050c:	4602      	mov	r2, r0
 800050e:	4629      	mov	r1, r5
 8000510:	f04f 30ff 	mov.w	r0, #4294967295
 8000514:	f000 f85e 	bl	80005d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <HAL_InitTick+0x44>)
 800051a:	4620      	mov	r0, r4
 800051c:	601d      	str	r5, [r3, #0]
 800051e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000520:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000522:	bd38      	pop	{r3, r4, r5, pc}
 8000524:	20000010 	.word	0x20000010
 8000528:	20000000 	.word	0x20000000
 800052c:	20000004 	.word	0x20000004

08000530 <HAL_Init>:
{
 8000530:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <HAL_Init+0x30>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800053a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000542:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800054a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 f82f 	bl	80005b0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000552:	2000      	movs	r0, #0
 8000554:	f7ff ffc8 	bl	80004e8 <HAL_InitTick>
  HAL_MspInit();
 8000558:	f001 fb1a 	bl	8001b90 <HAL_MspInit>
}
 800055c:	2000      	movs	r0, #0
 800055e:	bd08      	pop	{r3, pc}
 8000560:	40023c00 	.word	0x40023c00

08000564 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000564:	4a03      	ldr	r2, [pc, #12]	; (8000574 <HAL_IncTick+0x10>)
 8000566:	4b04      	ldr	r3, [pc, #16]	; (8000578 <HAL_IncTick+0x14>)
 8000568:	6811      	ldr	r1, [r2, #0]
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	440b      	add	r3, r1
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000034 	.word	0x20000034
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800057c:	4b01      	ldr	r3, [pc, #4]	; (8000584 <HAL_GetTick+0x8>)
 800057e:	6818      	ldr	r0, [r3, #0]
}
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20000034 	.word	0x20000034

08000588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000588:	b538      	push	{r3, r4, r5, lr}
 800058a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800058c:	f7ff fff6 	bl	800057c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000590:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000592:	bf1c      	itt	ne
 8000594:	4b05      	ldrne	r3, [pc, #20]	; (80005ac <HAL_Delay+0x24>)
 8000596:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000598:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800059a:	bf18      	it	ne
 800059c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800059e:	f7ff ffed 	bl	800057c <HAL_GetTick>
 80005a2:	1b40      	subs	r0, r0, r5
 80005a4:	4284      	cmp	r4, r0
 80005a6:	d8fa      	bhi.n	800059e <HAL_Delay+0x16>
  {
  }
}
 80005a8:	bd38      	pop	{r3, r4, r5, pc}
 80005aa:	bf00      	nop
 80005ac:	20000000 	.word	0x20000000

080005b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005b2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005b8:	041b      	lsls	r3, r3, #16
 80005ba:	0c1b      	lsrs	r3, r3, #16
 80005bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005c0:	0200      	lsls	r0, r0, #8
 80005c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005ca:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005cc:	60d3      	str	r3, [r2, #12]
 80005ce:	4770      	bx	lr
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d4:	4b17      	ldr	r3, [pc, #92]	; (8000634 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005d6:	b530      	push	{r4, r5, lr}
 80005d8:	68dc      	ldr	r4, [r3, #12]
 80005da:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005de:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e4:	2b04      	cmp	r3, #4
 80005e6:	bf28      	it	cs
 80005e8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ea:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ec:	f04f 0501 	mov.w	r5, #1
 80005f0:	fa05 f303 	lsl.w	r3, r5, r3
 80005f4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f8:	bf8c      	ite	hi
 80005fa:	3c03      	subhi	r4, #3
 80005fc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fe:	4019      	ands	r1, r3
 8000600:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000602:	fa05 f404 	lsl.w	r4, r5, r4
 8000606:	3c01      	subs	r4, #1
 8000608:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800060a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800060c:	ea42 0201 	orr.w	r2, r2, r1
 8000610:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000614:	bfaf      	iteee	ge
 8000616:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	f000 000f 	andlt.w	r0, r0, #15
 800061e:	4b06      	ldrlt	r3, [pc, #24]	; (8000638 <HAL_NVIC_SetPriority+0x64>)
 8000620:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000622:	bfa5      	ittet	ge
 8000624:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000628:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop
 8000634:	e000ed00 	.word	0xe000ed00
 8000638:	e000ed14 	.word	0xe000ed14

0800063c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800063c:	0942      	lsrs	r2, r0, #5
 800063e:	2301      	movs	r3, #1
 8000640:	f000 001f 	and.w	r0, r0, #31
 8000644:	fa03 f000 	lsl.w	r0, r3, r0
 8000648:	4b01      	ldr	r3, [pc, #4]	; (8000650 <HAL_NVIC_EnableIRQ+0x14>)
 800064a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800064e:	4770      	bx	lr
 8000650:	e000e100 	.word	0xe000e100

08000654 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000654:	3801      	subs	r0, #1
 8000656:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800065a:	d20a      	bcs.n	8000672 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065e:	4a07      	ldr	r2, [pc, #28]	; (800067c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000660:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	21f0      	movs	r1, #240	; 0xf0
 8000664:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000668:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800066c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000672:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000e010 	.word	0xe000e010
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000682:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000684:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000686:	bf0c      	ite	eq
 8000688:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800068c:	f022 0204 	bicne.w	r2, r2, #4
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	4770      	bx	lr
 8000694:	e000e010 	.word	0xe000e010

08000698 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000698:	4770      	bx	lr

0800069a <HAL_SYSTICK_IRQHandler>:
{
 800069a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800069c:	f7ff fffc 	bl	8000698 <HAL_SYSTICK_Callback>
 80006a0:	bd08      	pop	{r3, pc}

080006a2 <HAL_CRC_Init>:
  * @param  hcrc pointer to a CRC_HandleTypeDef structure that contains
  *         the configuration information for CRC
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80006a2:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 80006a4:	4604      	mov	r4, r0
 80006a6:	b160      	cbz	r0, 80006c2 <HAL_CRC_Init+0x20>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 80006a8:	7943      	ldrb	r3, [r0, #5]
 80006aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80006ae:	b913      	cbnz	r3, 80006b6 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80006b0:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80006b2:	f001 fa9d 	bl	8001bf0 <HAL_CRC_MspInit>
  }
  
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80006b6:	2302      	movs	r3, #2
 80006b8:	7163      	strb	r3, [r4, #5]
   
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80006ba:	2301      	movs	r3, #1
 80006bc:	7163      	strb	r3, [r4, #5]
  
  /* Return function status */
  return HAL_OK;
 80006be:	2000      	movs	r0, #0
 80006c0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80006c2:	2001      	movs	r0, #1
}
 80006c4:	bd10      	pop	{r4, pc}
	...

080006c8 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80006c8:	4908      	ldr	r1, [pc, #32]	; (80006ec <FLASH_Program_DoubleWord+0x24>)
{
 80006ca:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80006cc:	690c      	ldr	r4, [r1, #16]
 80006ce:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 80006d2:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80006d4:	690c      	ldr	r4, [r1, #16]
 80006d6:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 80006da:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 80006dc:	690c      	ldr	r4, [r1, #16]
 80006de:	f044 0401 	orr.w	r4, r4, #1
 80006e2:	610c      	str	r4, [r1, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80006e4:	6002      	str	r2, [r0, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80006e6:	6043      	str	r3, [r0, #4]
 80006e8:	bd10      	pop	{r4, pc}
 80006ea:	bf00      	nop
 80006ec:	40023c00 	.word	0x40023c00

080006f0 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <FLASH_Program_Word+0x20>)
 80006f2:	691a      	ldr	r2, [r3, #16]
 80006f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80006f8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80006fa:	691a      	ldr	r2, [r3, #16]
 80006fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000700:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000702:	691a      	ldr	r2, [r3, #16]
 8000704:	f042 0201 	orr.w	r2, r2, #1
 8000708:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 800070a:	6001      	str	r1, [r0, #0]
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	40023c00 	.word	0x40023c00

08000714 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <FLASH_Program_HalfWord+0x20>)
 8000716:	691a      	ldr	r2, [r3, #16]
 8000718:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800071c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800071e:	691a      	ldr	r2, [r3, #16]
 8000720:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000724:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000726:	691a      	ldr	r2, [r3, #16]
 8000728:	f042 0201 	orr.w	r2, r2, #1
 800072c:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 800072e:	8001      	strh	r1, [r0, #0]
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40023c00 	.word	0x40023c00

08000738 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000738:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <FLASH_SetErrorCode+0x6c>)
 800073a:	68da      	ldr	r2, [r3, #12]
 800073c:	06d2      	lsls	r2, r2, #27
 800073e:	d506      	bpl.n	800074e <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000740:	4919      	ldr	r1, [pc, #100]	; (80007a8 <FLASH_SetErrorCode+0x70>)
 8000742:	69ca      	ldr	r2, [r1, #28]
 8000744:	f042 0210 	orr.w	r2, r2, #16
 8000748:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800074a:	2210      	movs	r2, #16
 800074c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800074e:	68da      	ldr	r2, [r3, #12]
 8000750:	0690      	lsls	r0, r2, #26
 8000752:	d506      	bpl.n	8000762 <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000754:	4914      	ldr	r1, [pc, #80]	; (80007a8 <FLASH_SetErrorCode+0x70>)
 8000756:	69ca      	ldr	r2, [r1, #28]
 8000758:	f042 0208 	orr.w	r2, r2, #8
 800075c:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800075e:	2220      	movs	r2, #32
 8000760:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <FLASH_SetErrorCode+0x6c>)
 8000764:	68da      	ldr	r2, [r3, #12]
 8000766:	0651      	lsls	r1, r2, #25
 8000768:	d506      	bpl.n	8000778 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800076a:	490f      	ldr	r1, [pc, #60]	; (80007a8 <FLASH_SetErrorCode+0x70>)
 800076c:	69ca      	ldr	r2, [r1, #28]
 800076e:	f042 0204 	orr.w	r2, r2, #4
 8000772:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8000774:	2240      	movs	r2, #64	; 0x40
 8000776:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8000778:	68da      	ldr	r2, [r3, #12]
 800077a:	0612      	lsls	r2, r2, #24
 800077c:	d506      	bpl.n	800078c <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800077e:	490a      	ldr	r1, [pc, #40]	; (80007a8 <FLASH_SetErrorCode+0x70>)
 8000780:	69ca      	ldr	r2, [r1, #28]
 8000782:	f042 0202 	orr.w	r2, r2, #2
 8000786:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8000788:	2280      	movs	r2, #128	; 0x80
 800078a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800078c:	4a05      	ldr	r2, [pc, #20]	; (80007a4 <FLASH_SetErrorCode+0x6c>)
 800078e:	68d3      	ldr	r3, [r2, #12]
 8000790:	079b      	lsls	r3, r3, #30
 8000792:	d506      	bpl.n	80007a2 <FLASH_SetErrorCode+0x6a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000794:	4904      	ldr	r1, [pc, #16]	; (80007a8 <FLASH_SetErrorCode+0x70>)
 8000796:	69cb      	ldr	r3, [r1, #28]
 8000798:	f043 0320 	orr.w	r3, r3, #32
 800079c:	61cb      	str	r3, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800079e:	2302      	movs	r3, #2
 80007a0:	60d3      	str	r3, [r2, #12]
 80007a2:	4770      	bx	lr
 80007a4:	40023c00 	.word	0x40023c00
 80007a8:	20000038 	.word	0x20000038

080007ac <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_FLASH_Unlock+0x1c>)
 80007ae:	691a      	ldr	r2, [r3, #16]
 80007b0:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80007b2:	bfbf      	itttt	lt
 80007b4:	4a05      	ldrlt	r2, [pc, #20]	; (80007cc <HAL_FLASH_Unlock+0x20>)
 80007b6:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80007b8:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 80007bc:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80007be:	bfba      	itte	lt
 80007c0:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 80007c2:	0fc0      	lsrlt	r0, r0, #31
 80007c4:	2000      	movge	r0, #0
}
 80007c6:	4770      	bx	lr
 80007c8:	40023c00 	.word	0x40023c00
 80007cc:	45670123 	.word	0x45670123

080007d0 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 80007d0:	4a03      	ldr	r2, [pc, #12]	; (80007e0 <HAL_FLASH_Lock+0x10>)
 80007d2:	6913      	ldr	r3, [r2, #16]
 80007d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007d8:	6113      	str	r3, [r2, #16]
}
 80007da:	2000      	movs	r0, #0
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023c00 	.word	0x40023c00

080007e4 <HAL_FLASH_OB_Unlock>:
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_FLASH_OB_Unlock+0x1c>)
 80007e6:	695a      	ldr	r2, [r3, #20]
 80007e8:	07d2      	lsls	r2, r2, #31
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 80007ea:	bf41      	itttt	mi
 80007ec:	4a05      	ldrmi	r2, [pc, #20]	; (8000804 <HAL_FLASH_OB_Unlock+0x20>)
 80007ee:	609a      	strmi	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 80007f0:	f102 3244 	addmi.w	r2, r2, #1145324612	; 0x44444444
  return HAL_OK;  
 80007f4:	2000      	movmi	r0, #0
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 80007f6:	bf4c      	ite	mi
 80007f8:	609a      	strmi	r2, [r3, #8]
    return HAL_ERROR;
 80007fa:	2001      	movpl	r0, #1
}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40023c00 	.word	0x40023c00
 8000804:	08192a3b 	.word	0x08192a3b

08000808 <HAL_FLASH_OB_Lock>:
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000808:	4a03      	ldr	r2, [pc, #12]	; (8000818 <HAL_FLASH_OB_Lock+0x10>)
 800080a:	6953      	ldr	r3, [r2, #20]
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6153      	str	r3, [r2, #20]
}
 8000812:	2000      	movs	r0, #0
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40023c00 	.word	0x40023c00

0800081c <FLASH_WaitForLastOperation>:
{ 
 800081c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <FLASH_WaitForLastOperation+0x4c>)
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000820:	4c12      	ldr	r4, [pc, #72]	; (800086c <FLASH_WaitForLastOperation+0x50>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000822:	2200      	movs	r2, #0
{ 
 8000824:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000826:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8000828:	f7ff fea8 	bl	800057c <HAL_GetTick>
 800082c:	4626      	mov	r6, r4
 800082e:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000830:	68e3      	ldr	r3, [r4, #12]
 8000832:	03da      	lsls	r2, r3, #15
 8000834:	d40c      	bmi.n	8000850 <FLASH_WaitForLastOperation+0x34>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000836:	68e3      	ldr	r3, [r4, #12]
 8000838:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800083a:	bf44      	itt	mi
 800083c:	2301      	movmi	r3, #1
 800083e:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000840:	68f0      	ldr	r0, [r6, #12]
 8000842:	f010 00f2 	ands.w	r0, r0, #242	; 0xf2
 8000846:	d002      	beq.n	800084e <FLASH_WaitForLastOperation+0x32>
    FLASH_SetErrorCode();
 8000848:	f7ff ff76 	bl	8000738 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800084c:	2001      	movs	r0, #1
}  
 800084e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000850:	1c69      	adds	r1, r5, #1
 8000852:	d0ed      	beq.n	8000830 <FLASH_WaitForLastOperation+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000854:	b90d      	cbnz	r5, 800085a <FLASH_WaitForLastOperation+0x3e>
        return HAL_TIMEOUT;
 8000856:	2003      	movs	r0, #3
 8000858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800085a:	f7ff fe8f 	bl	800057c <HAL_GetTick>
 800085e:	1bc0      	subs	r0, r0, r7
 8000860:	4285      	cmp	r5, r0
 8000862:	d2e5      	bcs.n	8000830 <FLASH_WaitForLastOperation+0x14>
 8000864:	e7f7      	b.n	8000856 <FLASH_WaitForLastOperation+0x3a>
 8000866:	bf00      	nop
 8000868:	20000038 	.word	0x20000038
 800086c:	40023c00 	.word	0x40023c00

08000870 <HAL_FLASH_Program>:
{
 8000870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8000874:	4d20      	ldr	r5, [pc, #128]	; (80008f8 <HAL_FLASH_Program+0x88>)
{
 8000876:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 8000878:	7e2b      	ldrb	r3, [r5, #24]
 800087a:	2b01      	cmp	r3, #1
{
 800087c:	4607      	mov	r7, r0
 800087e:	460e      	mov	r6, r1
 8000880:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 8000882:	d035      	beq.n	80008f0 <HAL_FLASH_Program+0x80>
 8000884:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000886:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800088a:	762b      	strb	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800088c:	f7ff ffc6 	bl	800081c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000890:	b9b0      	cbnz	r0, 80008c0 <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000892:	b9cf      	cbnz	r7, 80008c8 <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000894:	4b19      	ldr	r3, [pc, #100]	; (80008fc <HAL_FLASH_Program+0x8c>)
 8000896:	691a      	ldr	r2, [r3, #16]
 8000898:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800089c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800089e:	691a      	ldr	r2, [r3, #16]
 80008a0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80008a2:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80008a4:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 80008a6:	f042 0201 	orr.w	r2, r2, #1
 80008aa:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 80008ac:	7034      	strb	r4, [r6, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80008ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 80008b2:	f7ff ffb3 	bl	800081c <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 80008b6:	4a11      	ldr	r2, [pc, #68]	; (80008fc <HAL_FLASH_Program+0x8c>)
 80008b8:	6913      	ldr	r3, [r2, #16]
 80008ba:	f023 0301 	bic.w	r3, r3, #1
 80008be:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 80008c0:	2300      	movs	r3, #0
 80008c2:	762b      	strb	r3, [r5, #24]
  return status;
 80008c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80008c8:	2f01      	cmp	r7, #1
 80008ca:	d104      	bne.n	80008d6 <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80008cc:	b2a1      	uxth	r1, r4
 80008ce:	4630      	mov	r0, r6
 80008d0:	f7ff ff20 	bl	8000714 <FLASH_Program_HalfWord>
 80008d4:	e7eb      	b.n	80008ae <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80008d6:	2f02      	cmp	r7, #2
 80008d8:	d104      	bne.n	80008e4 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 80008da:	4621      	mov	r1, r4
 80008dc:	4630      	mov	r0, r6
 80008de:	f7ff ff07 	bl	80006f0 <FLASH_Program_Word>
 80008e2:	e7e4      	b.n	80008ae <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 80008e4:	4622      	mov	r2, r4
 80008e6:	4643      	mov	r3, r8
 80008e8:	4630      	mov	r0, r6
 80008ea:	f7ff feed 	bl	80006c8 <FLASH_Program_DoubleWord>
 80008ee:	e7de      	b.n	80008ae <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 80008f0:	2002      	movs	r0, #2
}
 80008f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008f6:	bf00      	nop
 80008f8:	20000038 	.word	0x20000038
 80008fc:	40023c00 	.word	0x40023c00

08000900 <HAL_FLASH_OB_Launch>:
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8000900:	4a04      	ldr	r2, [pc, #16]	; (8000914 <HAL_FLASH_OB_Launch+0x14>)
 8000902:	7813      	ldrb	r3, [r2, #0]
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	7013      	strb	r3, [r2, #0]
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 800090a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800090e:	f7ff bf85 	b.w	800081c <FLASH_WaitForLastOperation>
 8000912:	bf00      	nop
 8000914:	40023c14 	.word	0x40023c14

08000918 <FLASH_MassErase.isra.0>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <FLASH_MassErase.isra.0+0x20>)
 800091a:	691a      	ldr	r2, [r3, #16]
 800091c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000920:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8000922:	691a      	ldr	r2, [r3, #16]
 8000924:	f042 0204 	orr.w	r2, r2, #4
 8000928:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800092a:	691a      	ldr	r2, [r3, #16]
 800092c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000930:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8000934:	6118      	str	r0, [r3, #16]
 8000936:	4770      	bx	lr
 8000938:	40023c00 	.word	0x40023c00

0800093c <HAL_FLASHEx_OBProgram>:
{
 800093c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(&pFlash);
 800093e:	4e29      	ldr	r6, [pc, #164]	; (80009e4 <HAL_FLASHEx_OBProgram+0xa8>)
 8000940:	7e33      	ldrb	r3, [r6, #24]
 8000942:	2b01      	cmp	r3, #1
{
 8000944:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8000946:	d04a      	beq.n	80009de <HAL_FLASHEx_OBProgram+0xa2>
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8000948:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(&pFlash);
 800094a:	2001      	movs	r0, #1
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800094c:	07dd      	lsls	r5, r3, #31
  __HAL_LOCK(&pFlash);
 800094e:	7630      	strb	r0, [r6, #24]
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8000950:	d50e      	bpl.n	8000970 <HAL_FLASHEx_OBProgram+0x34>
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8000952:	6863      	ldr	r3, [r4, #4]
 8000954:	68a5      	ldr	r5, [r4, #8]
 8000956:	4283      	cmp	r3, r0
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000958:	f24c 3050 	movw	r0, #50000	; 0xc350
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800095c:	d135      	bne.n	80009ca <HAL_FLASHEx_OBProgram+0x8e>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800095e:	f7ff ff5d 	bl	800081c <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 8000962:	b928      	cbnz	r0, 8000970 <HAL_FLASHEx_OBProgram+0x34>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~WRPSector);  
 8000964:	4a20      	ldr	r2, [pc, #128]	; (80009e8 <HAL_FLASHEx_OBProgram+0xac>)
 8000966:	8813      	ldrh	r3, [r2, #0]
 8000968:	b29b      	uxth	r3, r3
 800096a:	ea23 0505 	bic.w	r5, r3, r5
 800096e:	8015      	strh	r5, [r2, #0]
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8000970:	6823      	ldr	r3, [r4, #0]
 8000972:	0799      	lsls	r1, r3, #30
 8000974:	d508      	bpl.n	8000988 <HAL_FLASHEx_OBProgram+0x4c>
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000976:	f24c 3050 	movw	r0, #50000	; 0xc350
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 800097a:	6925      	ldr	r5, [r4, #16]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800097c:	f7ff ff4e 	bl	800081c <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 8000980:	b910      	cbnz	r0, 8000988 <HAL_FLASHEx_OBProgram+0x4c>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <HAL_FLASHEx_OBProgram+0xb0>)
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8000984:	b2ed      	uxtb	r5, r5
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 8000986:	701d      	strb	r5, [r3, #0]
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8000988:	6823      	ldr	r3, [r4, #0]
 800098a:	075a      	lsls	r2, r3, #29
 800098c:	d50d      	bpl.n	80009aa <HAL_FLASHEx_OBProgram+0x6e>
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800098e:	f24c 3050 	movw	r0, #50000	; 0xc350
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 8000992:	7e25      	ldrb	r5, [r4, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000994:	f7ff ff42 	bl	800081c <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 8000998:	b938      	cbnz	r0, 80009aa <HAL_FLASHEx_OBProgram+0x6e>
  {     
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 800099a:	4a15      	ldr	r2, [pc, #84]	; (80009f0 <HAL_FLASHEx_OBProgram+0xb4>)
 800099c:	7813      	ldrb	r3, [r2, #0]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp))); 
 800099e:	f025 051f 	bic.w	r5, r5, #31
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 80009a2:	f003 031f 	and.w	r3, r3, #31
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp))); 
 80009a6:	432b      	orrs	r3, r5
 80009a8:	7013      	strb	r3, [r2, #0]
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 80009aa:	6823      	ldr	r3, [r4, #0]
 80009ac:	071b      	lsls	r3, r3, #28
 80009ae:	d509      	bpl.n	80009c4 <HAL_FLASHEx_OBProgram+0x88>
{
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <HAL_FLASHEx_OBProgram+0xb4>)
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 80009b2:	7d22      	ldrb	r2, [r4, #20]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 80009b4:	7819      	ldrb	r1, [r3, #0]
 80009b6:	f001 01f3 	and.w	r1, r1, #243	; 0xf3
 80009ba:	7019      	strb	r1, [r3, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 80009bc:	7819      	ldrb	r1, [r3, #0]
 80009be:	430a      	orrs	r2, r1
 80009c0:	701a      	strb	r2, [r3, #0]
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 80009c2:	2000      	movs	r0, #0
  __HAL_UNLOCK(&pFlash);
 80009c4:	2300      	movs	r3, #0
 80009c6:	7633      	strb	r3, [r6, #24]
  return status;
 80009c8:	bd70      	pop	{r4, r5, r6, pc}
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80009ca:	f7ff ff27 	bl	800081c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80009ce:	2800      	cmp	r0, #0
 80009d0:	d1ce      	bne.n	8000970 <HAL_FLASHEx_OBProgram+0x34>
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector; 
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <HAL_FLASHEx_OBProgram+0xac>)
 80009d4:	881a      	ldrh	r2, [r3, #0]
 80009d6:	4315      	orrs	r5, r2
 80009d8:	b2ad      	uxth	r5, r5
 80009da:	801d      	strh	r5, [r3, #0]
 80009dc:	e7c8      	b.n	8000970 <HAL_FLASHEx_OBProgram+0x34>
  __HAL_LOCK(&pFlash);
 80009de:	2002      	movs	r0, #2
}
 80009e0:	bd70      	pop	{r4, r5, r6, pc}
 80009e2:	bf00      	nop
 80009e4:	20000038 	.word	0x20000038
 80009e8:	40023c16 	.word	0x40023c16
 80009ec:	40023c15 	.word	0x40023c15
 80009f0:	40023c14 	.word	0x40023c14

080009f4 <HAL_FLASHEx_OBGetConfig>:
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 80009f4:	230f      	movs	r3, #15
 80009f6:	6003      	str	r3, [r0, #0]
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <HAL_FLASHEx_OBGetConfig+0x38>)
  */
static uint8_t FLASH_OB_GetRDP(void)
{
  uint8_t readstatus = OB_RDP_LEVEL_0;

  if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2))
 80009fa:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <HAL_FLASHEx_OBGetConfig+0x3c>)
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	b29b      	uxth	r3, r3
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8000a00:	6083      	str	r3, [r0, #8]
  if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2))
 8000a02:	7813      	ldrb	r3, [r2, #0]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2bcc      	cmp	r3, #204	; 0xcc
 8000a08:	d004      	beq.n	8000a14 <HAL_FLASHEx_OBGetConfig+0x20>
  {
    readstatus = OB_RDP_LEVEL_2;
  }
  else if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_1))
 8000a0a:	7813      	ldrb	r3, [r2, #0]
 8000a0c:	2b55      	cmp	r3, #85	; 0x55
  {
    readstatus = OB_RDP_LEVEL_1;
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_0;
 8000a0e:	bf0c      	ite	eq
 8000a10:	2355      	moveq	r3, #85	; 0x55
 8000a12:	23aa      	movne	r3, #170	; 0xaa
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8000a14:	6103      	str	r3, [r0, #16]
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8000a16:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <HAL_FLASHEx_OBGetConfig+0x40>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	f023 031f 	bic.w	r3, r3, #31
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8000a1e:	7603      	strb	r3, [r0, #24]
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint8_t FLASH_OB_GetBOR(void)
{
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <HAL_FLASHEx_OBGetConfig+0x44>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8000a24:	f003 030c 	and.w	r3, r3, #12
 8000a28:	6143      	str	r3, [r0, #20]
 8000a2a:	4770      	bx	lr
 8000a2c:	40023c16 	.word	0x40023c16
 8000a30:	40023c15 	.word	0x40023c15
 8000a34:	40023c00 	.word	0x40023c00
 8000a38:	40023c14 	.word	0x40023c14

08000a3c <FLASH_Erase_Sector>:
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8000a3c:	b139      	cbz	r1, 8000a4e <FLASH_Erase_Sector+0x12>
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8000a3e:	2901      	cmp	r1, #1
 8000a40:	d01c      	beq.n	8000a7c <FLASH_Erase_Sector+0x40>
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8000a42:	2902      	cmp	r1, #2
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8000a44:	bf0c      	ite	eq
 8000a46:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8000a4a:	f44f 7140 	movne.w	r1, #768	; 0x300
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <FLASH_Erase_Sector+0x48>)
 8000a50:	691a      	ldr	r2, [r3, #16]
 8000a52:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000a56:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8000a58:	691a      	ldr	r2, [r3, #16]
 8000a5a:	4311      	orrs	r1, r2
 8000a5c:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8000a5e:	691a      	ldr	r2, [r3, #16]
 8000a60:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000a64:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8000a66:	691a      	ldr	r2, [r3, #16]
 8000a68:	f042 0202 	orr.w	r2, r2, #2
 8000a6c:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8000a70:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8000a72:	691a      	ldr	r2, [r3, #16]
 8000a74:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000a78:	611a      	str	r2, [r3, #16]
 8000a7a:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8000a7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a80:	e7e5      	b.n	8000a4e <FLASH_Erase_Sector+0x12>
 8000a82:	bf00      	nop
 8000a84:	40023c00 	.word	0x40023c00

08000a88 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <FLASH_FlushCaches+0x54>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	0591      	lsls	r1, r2, #22
 8000a8e:	d50f      	bpl.n	8000ab0 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a96:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000aa6:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000aae:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8000ab0:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <FLASH_FlushCaches+0x54>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	0552      	lsls	r2, r2, #21
 8000ab6:	d50f      	bpl.n	8000ad8 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000abe:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ace:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	40023c00 	.word	0x40023c00

08000ae0 <HAL_FLASHEx_Erase>:
{
 8000ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8000ae4:	4e23      	ldr	r6, [pc, #140]	; (8000b74 <HAL_FLASHEx_Erase+0x94>)
 8000ae6:	7e33      	ldrb	r3, [r6, #24]
 8000ae8:	2b01      	cmp	r3, #1
{
 8000aea:	4604      	mov	r4, r0
 8000aec:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8000aee:	d03f      	beq.n	8000b70 <HAL_FLASHEx_Erase+0x90>
 8000af0:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000af2:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8000af6:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000af8:	f7ff fe90 	bl	800081c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000afc:	4605      	mov	r5, r0
 8000afe:	b9a8      	cbnz	r0, 8000b2c <HAL_FLASHEx_Erase+0x4c>
    *SectorError = 0xFFFFFFFFU;
 8000b00:	f04f 33ff 	mov.w	r3, #4294967295
 8000b04:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000b08:	6823      	ldr	r3, [r4, #0]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d113      	bne.n	8000b36 <HAL_FLASHEx_Erase+0x56>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8000b0e:	7c20      	ldrb	r0, [r4, #16]
 8000b10:	f7ff ff02 	bl	8000918 <FLASH_MassErase.isra.0>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b14:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b18:	f7ff fe80 	bl	800081c <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 8000b1c:	4a16      	ldr	r2, [pc, #88]	; (8000b78 <HAL_FLASHEx_Erase+0x98>)
 8000b1e:	6913      	ldr	r3, [r2, #16]
 8000b20:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b24:	4605      	mov	r5, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8000b26:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();    
 8000b28:	f7ff ffae 	bl	8000a88 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	7633      	strb	r3, [r6, #24]
}
 8000b30:	4628      	mov	r0, r5
 8000b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000b36:	68a7      	ldr	r7, [r4, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8000b38:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8000b78 <HAL_FLASHEx_Erase+0x98>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000b3c:	68e3      	ldr	r3, [r4, #12]
 8000b3e:	68a2      	ldr	r2, [r4, #8]
 8000b40:	4413      	add	r3, r2
 8000b42:	429f      	cmp	r7, r3
 8000b44:	d2f0      	bcs.n	8000b28 <HAL_FLASHEx_Erase+0x48>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8000b46:	7c21      	ldrb	r1, [r4, #16]
 8000b48:	4638      	mov	r0, r7
 8000b4a:	f7ff ff77 	bl	8000a3c <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b4e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b52:	f7ff fe63 	bl	800081c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8000b56:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8000b5a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8000b5e:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 8000b62:	b118      	cbz	r0, 8000b6c <HAL_FLASHEx_Erase+0x8c>
          *SectorError = index;
 8000b64:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b68:	4605      	mov	r5, r0
          break;
 8000b6a:	e7dd      	b.n	8000b28 <HAL_FLASHEx_Erase+0x48>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000b6c:	3701      	adds	r7, #1
 8000b6e:	e7e5      	b.n	8000b3c <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8000b70:	2502      	movs	r5, #2
 8000b72:	e7dd      	b.n	8000b30 <HAL_FLASHEx_Erase+0x50>
 8000b74:	20000038 	.word	0x20000038
 8000b78:	40023c00 	.word	0x40023c00

08000b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b80:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b82:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b84:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000d34 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b88:	4a68      	ldr	r2, [pc, #416]	; (8000d2c <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b8a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000d38 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b8e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b90:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000b92:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b96:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000b98:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b9c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000ba0:	45b6      	cmp	lr, r6
 8000ba2:	f040 80ae 	bne.w	8000d02 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ba6:	684c      	ldr	r4, [r1, #4]
 8000ba8:	f024 0710 	bic.w	r7, r4, #16
 8000bac:	2f02      	cmp	r7, #2
 8000bae:	d116      	bne.n	8000bde <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000bb0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000bb4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bb8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000bbc:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bc0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000bc4:	f04f 0c0f 	mov.w	ip, #15
 8000bc8:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000bcc:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bd0:	690d      	ldr	r5, [r1, #16]
 8000bd2:	fa05 f50b 	lsl.w	r5, r5, fp
 8000bd6:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000bda:	f8ca 5020 	str.w	r5, [sl, #32]
 8000bde:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000be2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000be4:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000be8:	fa05 f50a 	lsl.w	r5, r5, sl
 8000bec:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bee:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bf2:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bf6:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bfa:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bfc:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c00:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000c02:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c06:	d811      	bhi.n	8000c2c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000c08:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c0a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c0e:	68cf      	ldr	r7, [r1, #12]
 8000c10:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000c14:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000c18:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c1a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c1c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c20:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000c24:	409f      	lsls	r7, r3
 8000c26:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000c2a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000c2c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c2e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c30:	688f      	ldr	r7, [r1, #8]
 8000c32:	fa07 f70a 	lsl.w	r7, r7, sl
 8000c36:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000c38:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c3a:	00e5      	lsls	r5, r4, #3
 8000c3c:	d561      	bpl.n	8000d02 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	f04f 0b00 	mov.w	fp, #0
 8000c42:	f8cd b00c 	str.w	fp, [sp, #12]
 8000c46:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c4a:	4d39      	ldr	r5, [pc, #228]	; (8000d30 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000c50:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000c54:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000c58:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000c5c:	9703      	str	r7, [sp, #12]
 8000c5e:	9f03      	ldr	r7, [sp, #12]
 8000c60:	f023 0703 	bic.w	r7, r3, #3
 8000c64:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000c68:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c6c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000c70:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c74:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000c78:	f04f 0e0f 	mov.w	lr, #15
 8000c7c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c80:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c82:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c86:	d043      	beq.n	8000d10 <HAL_GPIO_Init+0x194>
 8000c88:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c8c:	42a8      	cmp	r0, r5
 8000c8e:	d041      	beq.n	8000d14 <HAL_GPIO_Init+0x198>
 8000c90:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c94:	42a8      	cmp	r0, r5
 8000c96:	d03f      	beq.n	8000d18 <HAL_GPIO_Init+0x19c>
 8000c98:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c9c:	42a8      	cmp	r0, r5
 8000c9e:	d03d      	beq.n	8000d1c <HAL_GPIO_Init+0x1a0>
 8000ca0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ca4:	42a8      	cmp	r0, r5
 8000ca6:	d03b      	beq.n	8000d20 <HAL_GPIO_Init+0x1a4>
 8000ca8:	4548      	cmp	r0, r9
 8000caa:	d03b      	beq.n	8000d24 <HAL_GPIO_Init+0x1a8>
 8000cac:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000cb0:	42a8      	cmp	r0, r5
 8000cb2:	d039      	beq.n	8000d28 <HAL_GPIO_Init+0x1ac>
 8000cb4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cb8:	42a8      	cmp	r0, r5
 8000cba:	bf14      	ite	ne
 8000cbc:	2508      	movne	r5, #8
 8000cbe:	2507      	moveq	r5, #7
 8000cc0:	fa05 f50c 	lsl.w	r5, r5, ip
 8000cc4:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cc8:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000cca:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ccc:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cce:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000cd2:	bf0c      	ite	eq
 8000cd4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000cd6:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000cd8:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000cda:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cdc:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000ce0:	bf0c      	ite	eq
 8000ce2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000ce4:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000ce6:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ce8:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cea:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000cee:	bf0c      	ite	eq
 8000cf0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000cf2:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000cf4:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000cf6:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cf8:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000cfa:	bf54      	ite	pl
 8000cfc:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000cfe:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000d00:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d02:	3301      	adds	r3, #1
 8000d04:	2b10      	cmp	r3, #16
 8000d06:	f47f af44 	bne.w	8000b92 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000d0a:	b005      	add	sp, #20
 8000d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d10:	465d      	mov	r5, fp
 8000d12:	e7d5      	b.n	8000cc0 <HAL_GPIO_Init+0x144>
 8000d14:	2501      	movs	r5, #1
 8000d16:	e7d3      	b.n	8000cc0 <HAL_GPIO_Init+0x144>
 8000d18:	2502      	movs	r5, #2
 8000d1a:	e7d1      	b.n	8000cc0 <HAL_GPIO_Init+0x144>
 8000d1c:	2503      	movs	r5, #3
 8000d1e:	e7cf      	b.n	8000cc0 <HAL_GPIO_Init+0x144>
 8000d20:	2504      	movs	r5, #4
 8000d22:	e7cd      	b.n	8000cc0 <HAL_GPIO_Init+0x144>
 8000d24:	2505      	movs	r5, #5
 8000d26:	e7cb      	b.n	8000cc0 <HAL_GPIO_Init+0x144>
 8000d28:	2506      	movs	r5, #6
 8000d2a:	e7c9      	b.n	8000cc0 <HAL_GPIO_Init+0x144>
 8000d2c:	40013c00 	.word	0x40013c00
 8000d30:	40020000 	.word	0x40020000
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40021400 	.word	0x40021400

08000d3c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d3c:	b10a      	cbz	r2, 8000d42 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d3e:	6181      	str	r1, [r0, #24]
 8000d40:	4770      	bx	lr
 8000d42:	0409      	lsls	r1, r1, #16
 8000d44:	e7fb      	b.n	8000d3e <HAL_GPIO_WritePin+0x2>

08000d46 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000d46:	6943      	ldr	r3, [r0, #20]
 8000d48:	4059      	eors	r1, r3
 8000d4a:	6141      	str	r1, [r0, #20]
 8000d4c:	4770      	bx	lr

08000d4e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d4e:	4770      	bx	lr

08000d50 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000d50:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000d52:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000d54:	6959      	ldr	r1, [r3, #20]
 8000d56:	4201      	tst	r1, r0
 8000d58:	d002      	beq.n	8000d60 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d5a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d5c:	f7ff fff7 	bl	8000d4e <HAL_GPIO_EXTI_Callback>
 8000d60:	bd08      	pop	{r3, pc}
 8000d62:	bf00      	nop
 8000d64:	40013c00 	.word	0x40013c00

08000d68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	b918      	cbnz	r0, 8000d78 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000d70:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000d72:	b002      	add	sp, #8
 8000d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d78:	6803      	ldr	r3, [r0, #0]
 8000d7a:	07dd      	lsls	r5, r3, #31
 8000d7c:	d410      	bmi.n	8000da0 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	0798      	lsls	r0, r3, #30
 8000d82:	d458      	bmi.n	8000e36 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d84:	6823      	ldr	r3, [r4, #0]
 8000d86:	071a      	lsls	r2, r3, #28
 8000d88:	f100 809a 	bmi.w	8000ec0 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d8c:	6823      	ldr	r3, [r4, #0]
 8000d8e:	075b      	lsls	r3, r3, #29
 8000d90:	f100 80b8 	bmi.w	8000f04 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d94:	69a2      	ldr	r2, [r4, #24]
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8119 	bne.w	8000fce <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	e7e8      	b.n	8000d72 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000da0:	4ba6      	ldr	r3, [pc, #664]	; (800103c <HAL_RCC_OscConfig+0x2d4>)
 8000da2:	689a      	ldr	r2, [r3, #8]
 8000da4:	f002 020c 	and.w	r2, r2, #12
 8000da8:	2a04      	cmp	r2, #4
 8000daa:	d007      	beq.n	8000dbc <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000dac:	689a      	ldr	r2, [r3, #8]
 8000dae:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000db2:	2a08      	cmp	r2, #8
 8000db4:	d10a      	bne.n	8000dcc <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	0259      	lsls	r1, r3, #9
 8000dba:	d507      	bpl.n	8000dcc <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dbc:	4b9f      	ldr	r3, [pc, #636]	; (800103c <HAL_RCC_OscConfig+0x2d4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	039a      	lsls	r2, r3, #14
 8000dc2:	d5dc      	bpl.n	8000d7e <HAL_RCC_OscConfig+0x16>
 8000dc4:	6863      	ldr	r3, [r4, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1d9      	bne.n	8000d7e <HAL_RCC_OscConfig+0x16>
 8000dca:	e7d1      	b.n	8000d70 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dcc:	6863      	ldr	r3, [r4, #4]
 8000dce:	4d9b      	ldr	r5, [pc, #620]	; (800103c <HAL_RCC_OscConfig+0x2d4>)
 8000dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dd4:	d111      	bne.n	8000dfa <HAL_RCC_OscConfig+0x92>
 8000dd6:	682b      	ldr	r3, [r5, #0]
 8000dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ddc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000dde:	f7ff fbcd 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de2:	4d96      	ldr	r5, [pc, #600]	; (800103c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000de4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de6:	682b      	ldr	r3, [r5, #0]
 8000de8:	039b      	lsls	r3, r3, #14
 8000dea:	d4c8      	bmi.n	8000d7e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dec:	f7ff fbc6 	bl	800057c <HAL_GetTick>
 8000df0:	1b80      	subs	r0, r0, r6
 8000df2:	2864      	cmp	r0, #100	; 0x64
 8000df4:	d9f7      	bls.n	8000de6 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000df6:	2003      	movs	r0, #3
 8000df8:	e7bb      	b.n	8000d72 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dfe:	d104      	bne.n	8000e0a <HAL_RCC_OscConfig+0xa2>
 8000e00:	682b      	ldr	r3, [r5, #0]
 8000e02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e06:	602b      	str	r3, [r5, #0]
 8000e08:	e7e5      	b.n	8000dd6 <HAL_RCC_OscConfig+0x6e>
 8000e0a:	682a      	ldr	r2, [r5, #0]
 8000e0c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e10:	602a      	str	r2, [r5, #0]
 8000e12:	682a      	ldr	r2, [r5, #0]
 8000e14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e18:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d1df      	bne.n	8000dde <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8000e1e:	f7ff fbad 	bl	800057c <HAL_GetTick>
 8000e22:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e24:	682b      	ldr	r3, [r5, #0]
 8000e26:	039f      	lsls	r7, r3, #14
 8000e28:	d5a9      	bpl.n	8000d7e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e2a:	f7ff fba7 	bl	800057c <HAL_GetTick>
 8000e2e:	1b80      	subs	r0, r0, r6
 8000e30:	2864      	cmp	r0, #100	; 0x64
 8000e32:	d9f7      	bls.n	8000e24 <HAL_RCC_OscConfig+0xbc>
 8000e34:	e7df      	b.n	8000df6 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e36:	4b81      	ldr	r3, [pc, #516]	; (800103c <HAL_RCC_OscConfig+0x2d4>)
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	f012 0f0c 	tst.w	r2, #12
 8000e3e:	d007      	beq.n	8000e50 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e46:	2a08      	cmp	r2, #8
 8000e48:	d111      	bne.n	8000e6e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	025e      	lsls	r6, r3, #9
 8000e4e:	d40e      	bmi.n	8000e6e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e50:	4b7a      	ldr	r3, [pc, #488]	; (800103c <HAL_RCC_OscConfig+0x2d4>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	0795      	lsls	r5, r2, #30
 8000e56:	d502      	bpl.n	8000e5e <HAL_RCC_OscConfig+0xf6>
 8000e58:	68e2      	ldr	r2, [r4, #12]
 8000e5a:	2a01      	cmp	r2, #1
 8000e5c:	d188      	bne.n	8000d70 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	6921      	ldr	r1, [r4, #16]
 8000e62:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000e66:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000e6a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e6c:	e78a      	b.n	8000d84 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e6e:	68e2      	ldr	r2, [r4, #12]
 8000e70:	4b73      	ldr	r3, [pc, #460]	; (8001040 <HAL_RCC_OscConfig+0x2d8>)
 8000e72:	b1b2      	cbz	r2, 8000ea2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000e74:	2201      	movs	r2, #1
 8000e76:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e78:	f7ff fb80 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e7c:	4d6f      	ldr	r5, [pc, #444]	; (800103c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000e7e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e80:	682b      	ldr	r3, [r5, #0]
 8000e82:	0798      	lsls	r0, r3, #30
 8000e84:	d507      	bpl.n	8000e96 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e86:	682b      	ldr	r3, [r5, #0]
 8000e88:	6922      	ldr	r2, [r4, #16]
 8000e8a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e8e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e92:	602b      	str	r3, [r5, #0]
 8000e94:	e776      	b.n	8000d84 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e96:	f7ff fb71 	bl	800057c <HAL_GetTick>
 8000e9a:	1b80      	subs	r0, r0, r6
 8000e9c:	2802      	cmp	r0, #2
 8000e9e:	d9ef      	bls.n	8000e80 <HAL_RCC_OscConfig+0x118>
 8000ea0:	e7a9      	b.n	8000df6 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000ea2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ea4:	f7ff fb6a 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ea8:	4d64      	ldr	r5, [pc, #400]	; (800103c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000eaa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eac:	682b      	ldr	r3, [r5, #0]
 8000eae:	0799      	lsls	r1, r3, #30
 8000eb0:	f57f af68 	bpl.w	8000d84 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eb4:	f7ff fb62 	bl	800057c <HAL_GetTick>
 8000eb8:	1b80      	subs	r0, r0, r6
 8000eba:	2802      	cmp	r0, #2
 8000ebc:	d9f6      	bls.n	8000eac <HAL_RCC_OscConfig+0x144>
 8000ebe:	e79a      	b.n	8000df6 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000ec0:	6962      	ldr	r2, [r4, #20]
 8000ec2:	4b60      	ldr	r3, [pc, #384]	; (8001044 <HAL_RCC_OscConfig+0x2dc>)
 8000ec4:	b17a      	cbz	r2, 8000ee6 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000eca:	f7ff fb57 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ece:	4d5b      	ldr	r5, [pc, #364]	; (800103c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000ed0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ed2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ed4:	079f      	lsls	r7, r3, #30
 8000ed6:	f53f af59 	bmi.w	8000d8c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eda:	f7ff fb4f 	bl	800057c <HAL_GetTick>
 8000ede:	1b80      	subs	r0, r0, r6
 8000ee0:	2802      	cmp	r0, #2
 8000ee2:	d9f6      	bls.n	8000ed2 <HAL_RCC_OscConfig+0x16a>
 8000ee4:	e787      	b.n	8000df6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000ee6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ee8:	f7ff fb48 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eec:	4d53      	ldr	r5, [pc, #332]	; (800103c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000eee:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ef0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ef2:	0798      	lsls	r0, r3, #30
 8000ef4:	f57f af4a 	bpl.w	8000d8c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ef8:	f7ff fb40 	bl	800057c <HAL_GetTick>
 8000efc:	1b80      	subs	r0, r0, r6
 8000efe:	2802      	cmp	r0, #2
 8000f00:	d9f6      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x188>
 8000f02:	e778      	b.n	8000df6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f04:	4b4d      	ldr	r3, [pc, #308]	; (800103c <HAL_RCC_OscConfig+0x2d4>)
 8000f06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f08:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000f0c:	d128      	bne.n	8000f60 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f0e:	9201      	str	r2, [sp, #4]
 8000f10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f12:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f16:	641a      	str	r2, [r3, #64]	; 0x40
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f22:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f24:	4d48      	ldr	r5, [pc, #288]	; (8001048 <HAL_RCC_OscConfig+0x2e0>)
 8000f26:	682b      	ldr	r3, [r5, #0]
 8000f28:	05d9      	lsls	r1, r3, #23
 8000f2a:	d51b      	bpl.n	8000f64 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f2c:	68a3      	ldr	r3, [r4, #8]
 8000f2e:	4d43      	ldr	r5, [pc, #268]	; (800103c <HAL_RCC_OscConfig+0x2d4>)
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d127      	bne.n	8000f84 <HAL_RCC_OscConfig+0x21c>
 8000f34:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000f3c:	f7ff fb1e 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f40:	4d3e      	ldr	r5, [pc, #248]	; (800103c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000f42:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f44:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f48:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f4a:	079b      	lsls	r3, r3, #30
 8000f4c:	d539      	bpl.n	8000fc2 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000f4e:	2e00      	cmp	r6, #0
 8000f50:	f43f af20 	beq.w	8000d94 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f54:	4a39      	ldr	r2, [pc, #228]	; (800103c <HAL_RCC_OscConfig+0x2d4>)
 8000f56:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5e:	e719      	b.n	8000d94 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000f60:	2600      	movs	r6, #0
 8000f62:	e7df      	b.n	8000f24 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f64:	682b      	ldr	r3, [r5, #0]
 8000f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000f6c:	f7ff fb06 	bl	800057c <HAL_GetTick>
 8000f70:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f72:	682b      	ldr	r3, [r5, #0]
 8000f74:	05da      	lsls	r2, r3, #23
 8000f76:	d4d9      	bmi.n	8000f2c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f78:	f7ff fb00 	bl	800057c <HAL_GetTick>
 8000f7c:	1bc0      	subs	r0, r0, r7
 8000f7e:	2802      	cmp	r0, #2
 8000f80:	d9f7      	bls.n	8000f72 <HAL_RCC_OscConfig+0x20a>
 8000f82:	e738      	b.n	8000df6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f84:	2b05      	cmp	r3, #5
 8000f86:	d104      	bne.n	8000f92 <HAL_RCC_OscConfig+0x22a>
 8000f88:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f8a:	f043 0304 	orr.w	r3, r3, #4
 8000f8e:	672b      	str	r3, [r5, #112]	; 0x70
 8000f90:	e7d0      	b.n	8000f34 <HAL_RCC_OscConfig+0x1cc>
 8000f92:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000f94:	f022 0201 	bic.w	r2, r2, #1
 8000f98:	672a      	str	r2, [r5, #112]	; 0x70
 8000f9a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000f9c:	f022 0204 	bic.w	r2, r2, #4
 8000fa0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1ca      	bne.n	8000f3c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000fa6:	f7ff fae9 	bl	800057c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000faa:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000fae:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fb0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000fb2:	0798      	lsls	r0, r3, #30
 8000fb4:	d5cb      	bpl.n	8000f4e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fb6:	f7ff fae1 	bl	800057c <HAL_GetTick>
 8000fba:	1bc0      	subs	r0, r0, r7
 8000fbc:	4540      	cmp	r0, r8
 8000fbe:	d9f7      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x248>
 8000fc0:	e719      	b.n	8000df6 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fc2:	f7ff fadb 	bl	800057c <HAL_GetTick>
 8000fc6:	1bc0      	subs	r0, r0, r7
 8000fc8:	4540      	cmp	r0, r8
 8000fca:	d9bd      	bls.n	8000f48 <HAL_RCC_OscConfig+0x1e0>
 8000fcc:	e713      	b.n	8000df6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000fce:	4d1b      	ldr	r5, [pc, #108]	; (800103c <HAL_RCC_OscConfig+0x2d4>)
 8000fd0:	68ab      	ldr	r3, [r5, #8]
 8000fd2:	f003 030c 	and.w	r3, r3, #12
 8000fd6:	2b08      	cmp	r3, #8
 8000fd8:	f43f aeca 	beq.w	8000d70 <HAL_RCC_OscConfig+0x8>
 8000fdc:	4e1b      	ldr	r6, [pc, #108]	; (800104c <HAL_RCC_OscConfig+0x2e4>)
 8000fde:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fe0:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000fe2:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fe4:	d134      	bne.n	8001050 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000fe6:	f7ff fac9 	bl	800057c <HAL_GetTick>
 8000fea:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fec:	682b      	ldr	r3, [r5, #0]
 8000fee:	0199      	lsls	r1, r3, #6
 8000ff0:	d41e      	bmi.n	8001030 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ff2:	6a22      	ldr	r2, [r4, #32]
 8000ff4:	69e3      	ldr	r3, [r4, #28]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ffa:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000ffe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001000:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001004:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001006:	4c0d      	ldr	r4, [pc, #52]	; (800103c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001008:	0852      	lsrs	r2, r2, #1
 800100a:	3a01      	subs	r2, #1
 800100c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001010:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001012:	2301      	movs	r3, #1
 8001014:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001016:	f7ff fab1 	bl	800057c <HAL_GetTick>
 800101a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800101c:	6823      	ldr	r3, [r4, #0]
 800101e:	019a      	lsls	r2, r3, #6
 8001020:	f53f aebc 	bmi.w	8000d9c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001024:	f7ff faaa 	bl	800057c <HAL_GetTick>
 8001028:	1b40      	subs	r0, r0, r5
 800102a:	2802      	cmp	r0, #2
 800102c:	d9f6      	bls.n	800101c <HAL_RCC_OscConfig+0x2b4>
 800102e:	e6e2      	b.n	8000df6 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001030:	f7ff faa4 	bl	800057c <HAL_GetTick>
 8001034:	1bc0      	subs	r0, r0, r7
 8001036:	2802      	cmp	r0, #2
 8001038:	d9d8      	bls.n	8000fec <HAL_RCC_OscConfig+0x284>
 800103a:	e6dc      	b.n	8000df6 <HAL_RCC_OscConfig+0x8e>
 800103c:	40023800 	.word	0x40023800
 8001040:	42470000 	.word	0x42470000
 8001044:	42470e80 	.word	0x42470e80
 8001048:	40007000 	.word	0x40007000
 800104c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001050:	f7ff fa94 	bl	800057c <HAL_GetTick>
 8001054:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001056:	682b      	ldr	r3, [r5, #0]
 8001058:	019b      	lsls	r3, r3, #6
 800105a:	f57f ae9f 	bpl.w	8000d9c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800105e:	f7ff fa8d 	bl	800057c <HAL_GetTick>
 8001062:	1b00      	subs	r0, r0, r4
 8001064:	2802      	cmp	r0, #2
 8001066:	d9f6      	bls.n	8001056 <HAL_RCC_OscConfig+0x2ee>
 8001068:	e6c5      	b.n	8000df6 <HAL_RCC_OscConfig+0x8e>
 800106a:	bf00      	nop

0800106c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800106c:	4913      	ldr	r1, [pc, #76]	; (80010bc <HAL_RCC_GetSysClockFreq+0x50>)
{
 800106e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001070:	688b      	ldr	r3, [r1, #8]
 8001072:	f003 030c 	and.w	r3, r3, #12
 8001076:	2b04      	cmp	r3, #4
 8001078:	d003      	beq.n	8001082 <HAL_RCC_GetSysClockFreq+0x16>
 800107a:	2b08      	cmp	r3, #8
 800107c:	d003      	beq.n	8001086 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800107e:	4810      	ldr	r0, [pc, #64]	; (80010c0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001080:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001082:	4810      	ldr	r0, [pc, #64]	; (80010c4 <HAL_RCC_GetSysClockFreq+0x58>)
 8001084:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001086:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001088:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800108a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800108c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001090:	bf14      	ite	ne
 8001092:	480c      	ldrne	r0, [pc, #48]	; (80010c4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001094:	480a      	ldreq	r0, [pc, #40]	; (80010c0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001096:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800109a:	bf18      	it	ne
 800109c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800109e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010a2:	fba1 0100 	umull	r0, r1, r1, r0
 80010a6:	f7ff f897 	bl	80001d8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <HAL_RCC_GetSysClockFreq+0x50>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80010b2:	3301      	adds	r3, #1
 80010b4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80010b6:	fbb0 f0f3 	udiv	r0, r0, r3
 80010ba:	bd08      	pop	{r3, pc}
 80010bc:	40023800 	.word	0x40023800
 80010c0:	00f42400 	.word	0x00f42400
 80010c4:	007a1200 	.word	0x007a1200

080010c8 <HAL_RCC_ClockConfig>:
{
 80010c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010cc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80010ce:	4604      	mov	r4, r0
 80010d0:	b910      	cbnz	r0, 80010d8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80010d2:	2001      	movs	r0, #1
 80010d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010d8:	4b44      	ldr	r3, [pc, #272]	; (80011ec <HAL_RCC_ClockConfig+0x124>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	f002 020f 	and.w	r2, r2, #15
 80010e0:	428a      	cmp	r2, r1
 80010e2:	d328      	bcc.n	8001136 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010e4:	6821      	ldr	r1, [r4, #0]
 80010e6:	078f      	lsls	r7, r1, #30
 80010e8:	d42d      	bmi.n	8001146 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ea:	07c8      	lsls	r0, r1, #31
 80010ec:	d440      	bmi.n	8001170 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010ee:	4b3f      	ldr	r3, [pc, #252]	; (80011ec <HAL_RCC_ClockConfig+0x124>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	f002 020f 	and.w	r2, r2, #15
 80010f6:	4295      	cmp	r5, r2
 80010f8:	d366      	bcc.n	80011c8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010fa:	6822      	ldr	r2, [r4, #0]
 80010fc:	0751      	lsls	r1, r2, #29
 80010fe:	d46c      	bmi.n	80011da <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001100:	0713      	lsls	r3, r2, #28
 8001102:	d507      	bpl.n	8001114 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001104:	4a3a      	ldr	r2, [pc, #232]	; (80011f0 <HAL_RCC_ClockConfig+0x128>)
 8001106:	6921      	ldr	r1, [r4, #16]
 8001108:	6893      	ldr	r3, [r2, #8]
 800110a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800110e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001112:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001114:	f7ff ffaa 	bl	800106c <HAL_RCC_GetSysClockFreq>
 8001118:	4b35      	ldr	r3, [pc, #212]	; (80011f0 <HAL_RCC_ClockConfig+0x128>)
 800111a:	4a36      	ldr	r2, [pc, #216]	; (80011f4 <HAL_RCC_ClockConfig+0x12c>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001122:	5cd3      	ldrb	r3, [r2, r3]
 8001124:	40d8      	lsrs	r0, r3
 8001126:	4b34      	ldr	r3, [pc, #208]	; (80011f8 <HAL_RCC_ClockConfig+0x130>)
 8001128:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff f9dc 	bl	80004e8 <HAL_InitTick>
  return HAL_OK;
 8001130:	2000      	movs	r0, #0
 8001132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001136:	b2ca      	uxtb	r2, r1
 8001138:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 030f 	and.w	r3, r3, #15
 8001140:	4299      	cmp	r1, r3
 8001142:	d1c6      	bne.n	80010d2 <HAL_RCC_ClockConfig+0xa>
 8001144:	e7ce      	b.n	80010e4 <HAL_RCC_ClockConfig+0x1c>
 8001146:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001148:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800114c:	bf1e      	ittt	ne
 800114e:	689a      	ldrne	r2, [r3, #8]
 8001150:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001154:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001156:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001158:	bf42      	ittt	mi
 800115a:	689a      	ldrmi	r2, [r3, #8]
 800115c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001160:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	68a0      	ldr	r0, [r4, #8]
 8001166:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800116a:	4302      	orrs	r2, r0
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	e7bc      	b.n	80010ea <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001170:	6862      	ldr	r2, [r4, #4]
 8001172:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <HAL_RCC_ClockConfig+0x128>)
 8001174:	2a01      	cmp	r2, #1
 8001176:	d11d      	bne.n	80011b4 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800117e:	d0a8      	beq.n	80010d2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001180:	4e1b      	ldr	r6, [pc, #108]	; (80011f0 <HAL_RCC_ClockConfig+0x128>)
 8001182:	68b3      	ldr	r3, [r6, #8]
 8001184:	f023 0303 	bic.w	r3, r3, #3
 8001188:	4313      	orrs	r3, r2
 800118a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800118c:	f7ff f9f6 	bl	800057c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001190:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001194:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001196:	68b3      	ldr	r3, [r6, #8]
 8001198:	6862      	ldr	r2, [r4, #4]
 800119a:	f003 030c 	and.w	r3, r3, #12
 800119e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80011a2:	d0a4      	beq.n	80010ee <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011a4:	f7ff f9ea 	bl	800057c <HAL_GetTick>
 80011a8:	1bc0      	subs	r0, r0, r7
 80011aa:	4540      	cmp	r0, r8
 80011ac:	d9f3      	bls.n	8001196 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80011ae:	2003      	movs	r0, #3
}
 80011b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011b4:	1e91      	subs	r1, r2, #2
 80011b6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011b8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ba:	d802      	bhi.n	80011c2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011bc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011c0:	e7dd      	b.n	800117e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c2:	f013 0f02 	tst.w	r3, #2
 80011c6:	e7da      	b.n	800117e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011c8:	b2ea      	uxtb	r2, r5
 80011ca:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 030f 	and.w	r3, r3, #15
 80011d2:	429d      	cmp	r5, r3
 80011d4:	f47f af7d 	bne.w	80010d2 <HAL_RCC_ClockConfig+0xa>
 80011d8:	e78f      	b.n	80010fa <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011da:	4905      	ldr	r1, [pc, #20]	; (80011f0 <HAL_RCC_ClockConfig+0x128>)
 80011dc:	68e0      	ldr	r0, [r4, #12]
 80011de:	688b      	ldr	r3, [r1, #8]
 80011e0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80011e4:	4303      	orrs	r3, r0
 80011e6:	608b      	str	r3, [r1, #8]
 80011e8:	e78a      	b.n	8001100 <HAL_RCC_ClockConfig+0x38>
 80011ea:	bf00      	nop
 80011ec:	40023c00 	.word	0x40023c00
 80011f0:	40023800 	.word	0x40023800
 80011f4:	080022c4 	.word	0x080022c4
 80011f8:	20000010 	.word	0x20000010

080011fc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80011fc:	4b01      	ldr	r3, [pc, #4]	; (8001204 <HAL_RCC_GetHCLKFreq+0x8>)
 80011fe:	6818      	ldr	r0, [r3, #0]
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000010 	.word	0x20000010

08001208 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <HAL_RCC_GetPCLK1Freq+0x14>)
 800120a:	4a05      	ldr	r2, [pc, #20]	; (8001220 <HAL_RCC_GetPCLK1Freq+0x18>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001212:	5cd3      	ldrb	r3, [r2, r3]
 8001214:	4a03      	ldr	r2, [pc, #12]	; (8001224 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001216:	6810      	ldr	r0, [r2, #0]
}
 8001218:	40d8      	lsrs	r0, r3
 800121a:	4770      	bx	lr
 800121c:	40023800 	.word	0x40023800
 8001220:	080022d4 	.word	0x080022d4
 8001224:	20000010 	.word	0x20000010

08001228 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <HAL_RCC_GetPCLK2Freq+0x14>)
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <HAL_RCC_GetPCLK2Freq+0x18>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001232:	5cd3      	ldrb	r3, [r2, r3]
 8001234:	4a03      	ldr	r2, [pc, #12]	; (8001244 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001236:	6810      	ldr	r0, [r2, #0]
}
 8001238:	40d8      	lsrs	r0, r3
 800123a:	4770      	bx	lr
 800123c:	40023800 	.word	0x40023800
 8001240:	080022d4 	.word	0x080022d4
 8001244:	20000010 	.word	0x20000010

08001248 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800124c:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800124e:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001250:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001252:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001254:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001258:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800125a:	6133      	str	r3, [r6, #16]
{
 800125c:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800125e:	6883      	ldr	r3, [r0, #8]
 8001260:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001262:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001264:	4303      	orrs	r3, r0
 8001266:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001268:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800126c:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800126e:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001272:	430b      	orrs	r3, r1
 8001274:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001276:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001278:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800127a:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800127c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001280:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001282:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001286:	6173      	str	r3, [r6, #20]
 8001288:	4b7a      	ldr	r3, [pc, #488]	; (8001474 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800128a:	d17c      	bne.n	8001386 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800128c:	429e      	cmp	r6, r3
 800128e:	d003      	beq.n	8001298 <UART_SetConfig+0x50>
 8001290:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001294:	429e      	cmp	r6, r3
 8001296:	d144      	bne.n	8001322 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001298:	f7ff ffc6 	bl	8001228 <HAL_RCC_GetPCLK2Freq>
 800129c:	2519      	movs	r5, #25
 800129e:	fb05 f300 	mul.w	r3, r5, r0
 80012a2:	6860      	ldr	r0, [r4, #4]
 80012a4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80012a8:	0040      	lsls	r0, r0, #1
 80012aa:	fbb3 f3f0 	udiv	r3, r3, r0
 80012ae:	fbb3 f3f9 	udiv	r3, r3, r9
 80012b2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80012b6:	f7ff ffb7 	bl	8001228 <HAL_RCC_GetPCLK2Freq>
 80012ba:	6863      	ldr	r3, [r4, #4]
 80012bc:	4368      	muls	r0, r5
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fbb0 f7f3 	udiv	r7, r0, r3
 80012c4:	f7ff ffb0 	bl	8001228 <HAL_RCC_GetPCLK2Freq>
 80012c8:	6863      	ldr	r3, [r4, #4]
 80012ca:	4368      	muls	r0, r5
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80012d2:	fbb3 f3f9 	udiv	r3, r3, r9
 80012d6:	fb09 7313 	mls	r3, r9, r3, r7
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	3332      	adds	r3, #50	; 0x32
 80012de:	fbb3 f3f9 	udiv	r3, r3, r9
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80012e8:	f7ff ff9e 	bl	8001228 <HAL_RCC_GetPCLK2Freq>
 80012ec:	6862      	ldr	r2, [r4, #4]
 80012ee:	4368      	muls	r0, r5
 80012f0:	0052      	lsls	r2, r2, #1
 80012f2:	fbb0 faf2 	udiv	sl, r0, r2
 80012f6:	f7ff ff97 	bl	8001228 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80012fa:	6863      	ldr	r3, [r4, #4]
 80012fc:	4368      	muls	r0, r5
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	fbb0 f3f3 	udiv	r3, r0, r3
 8001304:	fbb3 f3f9 	udiv	r3, r3, r9
 8001308:	fb09 a313 	mls	r3, r9, r3, sl
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	3332      	adds	r3, #50	; 0x32
 8001310:	fbb3 f3f9 	udiv	r3, r3, r9
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800131a:	443b      	add	r3, r7
 800131c:	60b3      	str	r3, [r6, #8]
 800131e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001322:	f7ff ff71 	bl	8001208 <HAL_RCC_GetPCLK1Freq>
 8001326:	2519      	movs	r5, #25
 8001328:	fb05 f300 	mul.w	r3, r5, r0
 800132c:	6860      	ldr	r0, [r4, #4]
 800132e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001332:	0040      	lsls	r0, r0, #1
 8001334:	fbb3 f3f0 	udiv	r3, r3, r0
 8001338:	fbb3 f3f9 	udiv	r3, r3, r9
 800133c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001340:	f7ff ff62 	bl	8001208 <HAL_RCC_GetPCLK1Freq>
 8001344:	6863      	ldr	r3, [r4, #4]
 8001346:	4368      	muls	r0, r5
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	fbb0 f7f3 	udiv	r7, r0, r3
 800134e:	f7ff ff5b 	bl	8001208 <HAL_RCC_GetPCLK1Freq>
 8001352:	6863      	ldr	r3, [r4, #4]
 8001354:	4368      	muls	r0, r5
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	fbb0 f3f3 	udiv	r3, r0, r3
 800135c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001360:	fb09 7313 	mls	r3, r9, r3, r7
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	3332      	adds	r3, #50	; 0x32
 8001368:	fbb3 f3f9 	udiv	r3, r3, r9
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001372:	f7ff ff49 	bl	8001208 <HAL_RCC_GetPCLK1Freq>
 8001376:	6862      	ldr	r2, [r4, #4]
 8001378:	4368      	muls	r0, r5
 800137a:	0052      	lsls	r2, r2, #1
 800137c:	fbb0 faf2 	udiv	sl, r0, r2
 8001380:	f7ff ff42 	bl	8001208 <HAL_RCC_GetPCLK1Freq>
 8001384:	e7b9      	b.n	80012fa <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001386:	429e      	cmp	r6, r3
 8001388:	d002      	beq.n	8001390 <UART_SetConfig+0x148>
 800138a:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <UART_SetConfig+0x230>)
 800138c:	429e      	cmp	r6, r3
 800138e:	d140      	bne.n	8001412 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001390:	f7ff ff4a 	bl	8001228 <HAL_RCC_GetPCLK2Freq>
 8001394:	6867      	ldr	r7, [r4, #4]
 8001396:	2519      	movs	r5, #25
 8001398:	f04f 0964 	mov.w	r9, #100	; 0x64
 800139c:	fb05 f300 	mul.w	r3, r5, r0
 80013a0:	00bf      	lsls	r7, r7, #2
 80013a2:	fbb3 f3f7 	udiv	r3, r3, r7
 80013a6:	fbb3 f3f9 	udiv	r3, r3, r9
 80013aa:	011f      	lsls	r7, r3, #4
 80013ac:	f7ff ff3c 	bl	8001228 <HAL_RCC_GetPCLK2Freq>
 80013b0:	6863      	ldr	r3, [r4, #4]
 80013b2:	4368      	muls	r0, r5
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	fbb0 f8f3 	udiv	r8, r0, r3
 80013ba:	f7ff ff35 	bl	8001228 <HAL_RCC_GetPCLK2Freq>
 80013be:	6863      	ldr	r3, [r4, #4]
 80013c0:	4368      	muls	r0, r5
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80013c8:	fbb3 f3f9 	udiv	r3, r3, r9
 80013cc:	fb09 8313 	mls	r3, r9, r3, r8
 80013d0:	011b      	lsls	r3, r3, #4
 80013d2:	3332      	adds	r3, #50	; 0x32
 80013d4:	fbb3 f3f9 	udiv	r3, r3, r9
 80013d8:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80013dc:	f7ff ff24 	bl	8001228 <HAL_RCC_GetPCLK2Freq>
 80013e0:	6862      	ldr	r2, [r4, #4]
 80013e2:	4368      	muls	r0, r5
 80013e4:	0092      	lsls	r2, r2, #2
 80013e6:	fbb0 faf2 	udiv	sl, r0, r2
 80013ea:	f7ff ff1d 	bl	8001228 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80013ee:	6863      	ldr	r3, [r4, #4]
 80013f0:	4368      	muls	r0, r5
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80013f8:	fbb3 f3f9 	udiv	r3, r3, r9
 80013fc:	fb09 a313 	mls	r3, r9, r3, sl
 8001400:	011b      	lsls	r3, r3, #4
 8001402:	3332      	adds	r3, #50	; 0x32
 8001404:	fbb3 f3f9 	udiv	r3, r3, r9
 8001408:	f003 030f 	and.w	r3, r3, #15
 800140c:	ea43 0308 	orr.w	r3, r3, r8
 8001410:	e783      	b.n	800131a <UART_SetConfig+0xd2>
 8001412:	f7ff fef9 	bl	8001208 <HAL_RCC_GetPCLK1Freq>
 8001416:	6867      	ldr	r7, [r4, #4]
 8001418:	2519      	movs	r5, #25
 800141a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800141e:	fb05 f300 	mul.w	r3, r5, r0
 8001422:	00bf      	lsls	r7, r7, #2
 8001424:	fbb3 f3f7 	udiv	r3, r3, r7
 8001428:	fbb3 f3f9 	udiv	r3, r3, r9
 800142c:	011f      	lsls	r7, r3, #4
 800142e:	f7ff feeb 	bl	8001208 <HAL_RCC_GetPCLK1Freq>
 8001432:	6863      	ldr	r3, [r4, #4]
 8001434:	4368      	muls	r0, r5
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	fbb0 f8f3 	udiv	r8, r0, r3
 800143c:	f7ff fee4 	bl	8001208 <HAL_RCC_GetPCLK1Freq>
 8001440:	6863      	ldr	r3, [r4, #4]
 8001442:	4368      	muls	r0, r5
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	fbb0 f3f3 	udiv	r3, r0, r3
 800144a:	fbb3 f3f9 	udiv	r3, r3, r9
 800144e:	fb09 8313 	mls	r3, r9, r3, r8
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	3332      	adds	r3, #50	; 0x32
 8001456:	fbb3 f3f9 	udiv	r3, r3, r9
 800145a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800145e:	f7ff fed3 	bl	8001208 <HAL_RCC_GetPCLK1Freq>
 8001462:	6862      	ldr	r2, [r4, #4]
 8001464:	4368      	muls	r0, r5
 8001466:	0092      	lsls	r2, r2, #2
 8001468:	fbb0 faf2 	udiv	sl, r0, r2
 800146c:	f7ff fecc 	bl	8001208 <HAL_RCC_GetPCLK1Freq>
 8001470:	e7bd      	b.n	80013ee <UART_SetConfig+0x1a6>
 8001472:	bf00      	nop
 8001474:	40011000 	.word	0x40011000
 8001478:	40011400 	.word	0x40011400

0800147c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800147c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800147e:	4604      	mov	r4, r0
 8001480:	460e      	mov	r6, r1
 8001482:	4617      	mov	r7, r2
 8001484:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001486:	6821      	ldr	r1, [r4, #0]
 8001488:	680b      	ldr	r3, [r1, #0]
 800148a:	ea36 0303 	bics.w	r3, r6, r3
 800148e:	d101      	bne.n	8001494 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001490:	2000      	movs	r0, #0
}
 8001492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001494:	1c6b      	adds	r3, r5, #1
 8001496:	d0f7      	beq.n	8001488 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001498:	b995      	cbnz	r5, 80014c0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800149a:	6823      	ldr	r3, [r4, #0]
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80014a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014a4:	695a      	ldr	r2, [r3, #20]
 80014a6:	f022 0201 	bic.w	r2, r2, #1
 80014aa:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80014ac:	2320      	movs	r3, #32
 80014ae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80014b2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80014b6:	2300      	movs	r3, #0
 80014b8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80014bc:	2003      	movs	r0, #3
 80014be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80014c0:	f7ff f85c 	bl	800057c <HAL_GetTick>
 80014c4:	1bc0      	subs	r0, r0, r7
 80014c6:	4285      	cmp	r5, r0
 80014c8:	d2dd      	bcs.n	8001486 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80014ca:	e7e6      	b.n	800149a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080014cc <HAL_UART_Init>:
{
 80014cc:	b510      	push	{r4, lr}
  if(huart == NULL)
 80014ce:	4604      	mov	r4, r0
 80014d0:	b340      	cbz	r0, 8001524 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80014d2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80014d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014da:	b91b      	cbnz	r3, 80014e4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80014dc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80014e0:	f000 fb9e 	bl	8001c20 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80014e4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80014e6:	2324      	movs	r3, #36	; 0x24
 80014e8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80014ec:	68d3      	ldr	r3, [r2, #12]
 80014ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80014f2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80014f4:	4620      	mov	r0, r4
 80014f6:	f7ff fea7 	bl	8001248 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014fa:	6823      	ldr	r3, [r4, #0]
 80014fc:	691a      	ldr	r2, [r3, #16]
 80014fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001502:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001504:	695a      	ldr	r2, [r3, #20]
 8001506:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800150a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001512:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001514:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001516:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001518:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800151a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800151e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001522:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001524:	2001      	movs	r0, #1
}
 8001526:	bd10      	pop	{r4, pc}

08001528 <HAL_UART_Transmit>:
{
 8001528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800152c:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 800152e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001532:	2b20      	cmp	r3, #32
{
 8001534:	4604      	mov	r4, r0
 8001536:	460d      	mov	r5, r1
 8001538:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 800153a:	d14f      	bne.n	80015dc <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 800153c:	2900      	cmp	r1, #0
 800153e:	d04a      	beq.n	80015d6 <HAL_UART_Transmit+0xae>
 8001540:	2a00      	cmp	r2, #0
 8001542:	d048      	beq.n	80015d6 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001544:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001548:	2b01      	cmp	r3, #1
 800154a:	d047      	beq.n	80015dc <HAL_UART_Transmit+0xb4>
 800154c:	2301      	movs	r3, #1
 800154e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001552:	2300      	movs	r3, #0
 8001554:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001556:	2321      	movs	r3, #33	; 0x21
 8001558:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800155c:	f7ff f80e 	bl	800057c <HAL_GetTick>
    huart->TxXferSize = Size;
 8001560:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001564:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001566:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800156a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800156c:	b29b      	uxth	r3, r3
 800156e:	b96b      	cbnz	r3, 800158c <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001570:	463b      	mov	r3, r7
 8001572:	4632      	mov	r2, r6
 8001574:	2140      	movs	r1, #64	; 0x40
 8001576:	4620      	mov	r0, r4
 8001578:	f7ff ff80 	bl	800147c <UART_WaitOnFlagUntilTimeout.constprop.3>
 800157c:	b9b0      	cbnz	r0, 80015ac <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 800157e:	2320      	movs	r3, #32
 8001580:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001584:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 800158c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800158e:	3b01      	subs	r3, #1
 8001590:	b29b      	uxth	r3, r3
 8001592:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001594:	68a3      	ldr	r3, [r4, #8]
 8001596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800159a:	4632      	mov	r2, r6
 800159c:	463b      	mov	r3, r7
 800159e:	f04f 0180 	mov.w	r1, #128	; 0x80
 80015a2:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80015a4:	d10e      	bne.n	80015c4 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015a6:	f7ff ff69 	bl	800147c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80015aa:	b110      	cbz	r0, 80015b2 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80015ac:	2003      	movs	r0, #3
 80015ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80015b2:	882b      	ldrh	r3, [r5, #0]
 80015b4:	6822      	ldr	r2, [r4, #0]
 80015b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015ba:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80015bc:	6923      	ldr	r3, [r4, #16]
 80015be:	b943      	cbnz	r3, 80015d2 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 80015c0:	3502      	adds	r5, #2
 80015c2:	e7d2      	b.n	800156a <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015c4:	f7ff ff5a 	bl	800147c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80015c8:	2800      	cmp	r0, #0
 80015ca:	d1ef      	bne.n	80015ac <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80015cc:	6823      	ldr	r3, [r4, #0]
 80015ce:	782a      	ldrb	r2, [r5, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	3501      	adds	r5, #1
 80015d4:	e7c9      	b.n	800156a <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80015d6:	2001      	movs	r0, #1
 80015d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80015dc:	2002      	movs	r0, #2
}
 80015de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080015e2 <HAL_UART_Receive>:
{ 
 80015e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015e6:	461f      	mov	r7, r3
  if(huart->RxState == HAL_UART_STATE_READY) 
 80015e8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80015ec:	2b20      	cmp	r3, #32
{ 
 80015ee:	4604      	mov	r4, r0
 80015f0:	460d      	mov	r5, r1
 80015f2:	4690      	mov	r8, r2
  if(huart->RxState == HAL_UART_STATE_READY) 
 80015f4:	d152      	bne.n	800169c <HAL_UART_Receive+0xba>
    if((pData == NULL ) || (Size == 0)) 
 80015f6:	2900      	cmp	r1, #0
 80015f8:	d04d      	beq.n	8001696 <HAL_UART_Receive+0xb4>
 80015fa:	2a00      	cmp	r2, #0
 80015fc:	d04b      	beq.n	8001696 <HAL_UART_Receive+0xb4>
    __HAL_LOCK(huart);
 80015fe:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001602:	2b01      	cmp	r3, #1
 8001604:	d04a      	beq.n	800169c <HAL_UART_Receive+0xba>
 8001606:	2301      	movs	r3, #1
 8001608:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800160c:	2300      	movs	r3, #0
 800160e:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001610:	2322      	movs	r3, #34	; 0x22
 8001612:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8001616:	f7fe ffb1 	bl	800057c <HAL_GetTick>
    huart->RxXferSize = Size; 
 800161a:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 800161e:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 8001620:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while(huart->RxXferCount > 0U)
 8001624:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8001626:	b280      	uxth	r0, r0
 8001628:	b930      	cbnz	r0, 8001638 <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 800162a:	2320      	movs	r3, #32
 800162c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 8001630:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 8001638:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800163a:	3b01      	subs	r3, #1
 800163c:	b29b      	uxth	r3, r3
 800163e:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001640:	68a3      	ldr	r3, [r4, #8]
 8001642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001646:	4632      	mov	r2, r6
 8001648:	463b      	mov	r3, r7
 800164a:	f04f 0120 	mov.w	r1, #32
 800164e:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001650:	d112      	bne.n	8001678 <HAL_UART_Receive+0x96>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001652:	f7ff ff13 	bl	800147c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001656:	b110      	cbz	r0, 800165e <HAL_UART_Receive+0x7c>
          return HAL_TIMEOUT;
 8001658:	2003      	movs	r0, #3
 800165a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800165e:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001660:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001662:	685b      	ldr	r3, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001664:	b922      	cbnz	r2, 8001670 <HAL_UART_Receive+0x8e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800166a:	f825 3b02 	strh.w	r3, [r5], #2
 800166e:	e7d9      	b.n	8001624 <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001670:	b2db      	uxtb	r3, r3
 8001672:	f825 3b01 	strh.w	r3, [r5], #1
 8001676:	e7d5      	b.n	8001624 <HAL_UART_Receive+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001678:	f7ff ff00 	bl	800147c <UART_WaitOnFlagUntilTimeout.constprop.3>
 800167c:	2800      	cmp	r0, #0
 800167e:	d1eb      	bne.n	8001658 <HAL_UART_Receive+0x76>
 8001680:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001682:	6921      	ldr	r1, [r4, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	1c6a      	adds	r2, r5, #1
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001688:	b911      	cbnz	r1, 8001690 <HAL_UART_Receive+0xae>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800168a:	702b      	strb	r3, [r5, #0]
 800168c:	4615      	mov	r5, r2
 800168e:	e7c9      	b.n	8001624 <HAL_UART_Receive+0x42>
 8001690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001694:	e7f9      	b.n	800168a <HAL_UART_Receive+0xa8>
      return  HAL_ERROR;
 8001696:	2001      	movs	r0, #1
 8001698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;   
 800169c:	2002      	movs	r0, #2
}
 800169e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080016a4 <Serial_PutString>:
    length++;
  }
  HAL_UART_Transmit(&huart1, p_string, length, TX_TIMEOUT);
}

void Serial_PutString(char *p_string){
 80016a4:	b510      	push	{r4, lr}
 80016a6:	4604      	mov	r4, r0
	uint16_t length = sizeof(p_string)-1;
	length = (uint16_t)strlen(p_string);
 80016a8:	f7fe fd8e 	bl	80001c8 <strlen>
	//char buffer[]="koik on ok";
	HAL_UART_Transmit(&huart1, (uint8_t*)p_string, length, TX_TIMEOUT);
 80016ac:	4621      	mov	r1, r4
 80016ae:	b282      	uxth	r2, r0
 80016b0:	f04f 33ff 	mov.w	r3, #4294967295
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <Serial_PutString+0x1c>)
	//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sizeof(buffer)-1 ,  HAL_MAX_DELAY);

}
 80016b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit(&huart1, (uint8_t*)p_string, length, TX_TIMEOUT);
 80016ba:	f7ff bf35 	b.w	8001528 <HAL_UART_Transmit>
 80016be:	bf00      	nop
 80016c0:	20000060 	.word	0x20000060

080016c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c4:	b510      	push	{r4, lr}
 80016c6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c8:	2300      	movs	r3, #0
 80016ca:	4a21      	ldr	r2, [pc, #132]	; (8001750 <SystemClock_Config+0x8c>)
 80016cc:	9301      	str	r3, [sp, #4]
 80016ce:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80016d0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80016d4:	6411      	str	r1, [r2, #64]	; 0x40
 80016d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016d8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80016dc:	9201      	str	r2, [sp, #4]
 80016de:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016e0:	4a1c      	ldr	r2, [pc, #112]	; (8001754 <SystemClock_Config+0x90>)
 80016e2:	9302      	str	r3, [sp, #8]
 80016e4:	6811      	ldr	r1, [r2, #0]
 80016e6:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80016ea:	6011      	str	r1, [r2, #0]
 80016ec:	6812      	ldr	r2, [r2, #0]
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016ee:	930e      	str	r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016f0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80016f4:	9202      	str	r2, [sp, #8]
 80016f6:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016f8:	2202      	movs	r2, #2
 80016fa:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016fc:	2201      	movs	r2, #1
 80016fe:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001700:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001702:	2210      	movs	r2, #16
 8001704:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001706:	f7ff fb2f 	bl	8000d68 <HAL_RCC_OscConfig>
 800170a:	4601      	mov	r1, r0
 800170c:	b100      	cbz	r0, 8001710 <SystemClock_Config+0x4c>
 800170e:	e7fe      	b.n	800170e <SystemClock_Config+0x4a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001710:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001712:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001714:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001716:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001718:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800171a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800171c:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800171e:	f7ff fcd3 	bl	80010c8 <HAL_RCC_ClockConfig>
 8001722:	4604      	mov	r4, r0
 8001724:	b100      	cbz	r0, 8001728 <SystemClock_Config+0x64>
 8001726:	e7fe      	b.n	8001726 <SystemClock_Config+0x62>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001728:	f7ff fd68 	bl	80011fc <HAL_RCC_GetHCLKFreq>
 800172c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001730:	fbb0 f0f3 	udiv	r0, r0, r3
 8001734:	f7fe ff8e 	bl	8000654 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001738:	2004      	movs	r0, #4
 800173a:	f7fe ffa1 	bl	8000680 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800173e:	4622      	mov	r2, r4
 8001740:	4621      	mov	r1, r4
 8001742:	f04f 30ff 	mov.w	r0, #4294967295
 8001746:	f7fe ff45 	bl	80005d4 <HAL_NVIC_SetPriority>
}
 800174a:	b014      	add	sp, #80	; 0x50
 800174c:	bd10      	pop	{r4, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800
 8001754:	40007000 	.word	0x40007000

08001758 <main>:
{
 8001758:	b570      	push	{r4, r5, r6, lr}
 800175a:	b08a      	sub	sp, #40	; 0x28
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800175c:	2400      	movs	r4, #0
 800175e:	4d51      	ldr	r5, [pc, #324]	; (80018a4 <main+0x14c>)
  HAL_Init();
 8001760:	f7fe fee6 	bl	8000530 <HAL_Init>
  SystemClock_Config();
 8001764:	f7ff ffae 	bl	80016c4 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001768:	9401      	str	r4, [sp, #4]
 800176a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800176c:	484e      	ldr	r0, [pc, #312]	; (80018a8 <main+0x150>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	632b      	str	r3, [r5, #48]	; 0x30
 8001774:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	9402      	str	r4, [sp, #8]
 8001780:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	632b      	str	r3, [r5, #48]	; 0x30
 8001788:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	9302      	str	r3, [sp, #8]
 8001790:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001792:	9403      	str	r4, [sp, #12]
 8001794:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001796:	f043 0302 	orr.w	r3, r3, #2
 800179a:	632b      	str	r3, [r5, #48]	; 0x30
 800179c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	9303      	str	r3, [sp, #12]
 80017a4:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a6:	9404      	str	r4, [sp, #16]
 80017a8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80017aa:	f043 0308 	orr.w	r3, r3, #8
 80017ae:	632b      	str	r3, [r5, #48]	; 0x30
 80017b0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80017b2:	2201      	movs	r2, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b4:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80017b8:	4611      	mov	r1, r2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ba:	9304      	str	r3, [sp, #16]
 80017bc:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80017be:	f7ff fabd 	bl	8000d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80017c2:	4622      	mov	r2, r4
 80017c4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80017c8:	4838      	ldr	r0, [pc, #224]	; (80018ac <main+0x154>)
 80017ca:	f7ff fab7 	bl	8000d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80017ce:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80017d0:	a905      	add	r1, sp, #20
 80017d2:	4835      	ldr	r0, [pc, #212]	; (80018a8 <main+0x150>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80017d4:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d6:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80017dc:	f7ff f9ce 	bl	8000b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017e0:	4b33      	ldr	r3, [pc, #204]	; (80018b0 <main+0x158>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017e2:	4834      	ldr	r0, [pc, #208]	; (80018b4 <main+0x15c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017e4:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017e6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = B1_Pin;
 80017e8:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017ec:	f7ff f9c6 	bl	8000b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80017f0:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80017f2:	a905      	add	r1, sp, #20
 80017f4:	4830      	ldr	r0, [pc, #192]	; (80018b8 <main+0x160>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80017f6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80017fc:	f7ff f9be 	bl	8000b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8001800:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001804:	a905      	add	r1, sp, #20
 8001806:	4829      	ldr	r0, [pc, #164]	; (80018ac <main+0x154>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8001808:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180a:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001810:	f7ff f9b4 	bl	8000b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001814:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001816:	a905      	add	r1, sp, #20
 8001818:	4824      	ldr	r0, [pc, #144]	; (80018ac <main+0x154>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800181a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001820:	f7ff f9ac 	bl	8000b7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001824:	4622      	mov	r2, r4
 8001826:	4621      	mov	r1, r4
 8001828:	2006      	movs	r0, #6
 800182a:	f7fe fed3 	bl	80005d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800182e:	2006      	movs	r0, #6
 8001830:	f7fe ff04 	bl	800063c <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 8001834:	4821      	ldr	r0, [pc, #132]	; (80018bc <main+0x164>)
  huart1.Init.BaudRate = 2400 ;
 8001836:	4a22      	ldr	r2, [pc, #136]	; (80018c0 <main+0x168>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001838:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 2400 ;
 800183a:	f44f 6316 	mov.w	r3, #2400	; 0x960
 800183e:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001842:	230c      	movs	r3, #12
 8001844:	6143      	str	r3, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  huart1.Init.StopBits = UART_STOPBITS_1;
 800184a:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800184c:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800184e:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001850:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001852:	f7ff fe3b 	bl	80014cc <HAL_UART_Init>
 8001856:	b100      	cbz	r0, 800185a <main+0x102>
 8001858:	e7fe      	b.n	8001858 <main+0x100>
  hcrc.Instance = CRC;
 800185a:	481a      	ldr	r0, [pc, #104]	; (80018c4 <main+0x16c>)
 800185c:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <main+0x170>)
 800185e:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001860:	f7fe ff1f 	bl	80006a2 <HAL_CRC_Init>
 8001864:	b100      	cbz	r0, 8001868 <main+0x110>
 8001866:	e7fe      	b.n	8001866 <main+0x10e>
  __HAL_RCC_CRC_CLK_ENABLE();
 8001868:	9005      	str	r0, [sp, #20]
 800186a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800186c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001870:	632b      	str	r3, [r5, #48]	; 0x30
 8001872:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	  HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8001874:	4d0d      	ldr	r5, [pc, #52]	; (80018ac <main+0x154>)
  __HAL_RCC_CRC_CLK_ENABLE();
 8001876:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800187a:	9305      	str	r3, [sp, #20]
 800187c:	9b05      	ldr	r3, [sp, #20]
	  HAL_Delay(10* kordaja);
 800187e:	240a      	movs	r4, #10
	  HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8001880:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001884:	4628      	mov	r0, r5
 8001886:	f7ff fa5e 	bl	8000d46 <HAL_GPIO_TogglePin>
	  int clicked = get_clicked();
 800188a:	f000 fa17 	bl	8001cbc <get_clicked>
	  if (clicked){
 800188e:	b118      	cbz	r0, 8001898 <main+0x140>
		  reset_clicked();
 8001890:	f000 fa1a 	bl	8001cc8 <reset_clicked>
		  Main_Menu();
 8001894:	f000 f8b4 	bl	8001a00 <Main_Menu>
	  int kordaja = get_kordaja();
 8001898:	f000 fa0a 	bl	8001cb0 <get_kordaja>
	  HAL_Delay(10* kordaja);
 800189c:	4360      	muls	r0, r4
 800189e:	f7fe fe73 	bl	8000588 <HAL_Delay>
  {
 80018a2:	e7ed      	b.n	8001880 <main+0x128>
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020800 	.word	0x40020800
 80018ac:	40020c00 	.word	0x40020c00
 80018b0:	10210000 	.word	0x10210000
 80018b4:	40020000 	.word	0x40020000
 80018b8:	40020400 	.word	0x40020400
 80018bc:	20000060 	.word	0x20000060
 80018c0:	40011000 	.word	0x40011000
 80018c4:	20000058 	.word	0x20000058
 80018c8:	40023000 	.word	0x40023000

080018cc <SerialUpload>:
/**
  * @brief  Upload a file to flash via serial port
  * @param  None
  * @retval None
  */
void SerialUpload(void){
 80018cc:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status;

  Serial_PutString("Erasing flash..\n");
 80018ce:	4830      	ldr	r0, [pc, #192]	; (8001990 <SerialUpload+0xc4>)
void SerialUpload(void){
 80018d0:	b088      	sub	sp, #32
  Serial_PutString("Erasing flash..\n");
 80018d2:	f7ff fee7 	bl	80016a4 <Serial_PutString>

  HAL_FLASH_Unlock();
 80018d6:	f7fe ff69 	bl	80007ac <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 80018da:	4b2e      	ldr	r3, [pc, #184]	; (8001994 <SerialUpload+0xc8>)
 80018dc:	22b3      	movs	r2, #179	; 0xb3
 80018de:	60da      	str	r2, [r3, #12]

  FLASH_EraseInitTypeDef pEraseInit;
  	  pEraseInit.Sector = FLASH_SECTOR_3;
 80018e0:	2303      	movs	r3, #3
 80018e2:	9305      	str	r3, [sp, #20]
  	  pEraseInit.NbSectors = 11-3;
 80018e4:	2308      	movs	r3, #8
 80018e6:	9306      	str	r3, [sp, #24]
  	  pEraseInit.VoltageRange = VOLTAGE_RANGE_3;
 80018e8:	2302      	movs	r3, #2
 80018ea:	9307      	str	r3, [sp, #28]
  	  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
  uint32_t SectorError = 0xFFFFFFFFU;
 80018ec:	a908      	add	r1, sp, #32
  	  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80018ee:	2300      	movs	r3, #0
 80018f0:	9303      	str	r3, [sp, #12]
  uint32_t SectorError = 0xFFFFFFFFU;
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
 80018f6:	f841 3d18 	str.w	r3, [r1, #-24]!

  status = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80018fa:	a803      	add	r0, sp, #12
 80018fc:	f7ff f8f0 	bl	8000ae0 <HAL_FLASHEx_Erase>
  if(status ==  HAL_OK){Serial_PutString("Successfully erased!\n");}
 8001900:	2800      	cmp	r0, #0
 8001902:	d137      	bne.n	8001974 <SerialUpload+0xa8>
 8001904:	4824      	ldr	r0, [pc, #144]	; (8001998 <SerialUpload+0xcc>)

  int finished = 0;
  uint8_t offset = 0;
  uint8_t nack = 19;
  uint8_t ack = 17;
  uint32_t flashAddr = APPLICATION_ADDRESS;
 8001906:	4c25      	ldr	r4, [pc, #148]	; (800199c <SerialUpload+0xd0>)

  while(finished == 0){
	  uint8_t data;
	  //Serial_PutString("send something.\n");
	  HAL_UART_Receive(&huart1, &data, 1, RX_TIMEOUT);
 8001908:	4e25      	ldr	r6, [pc, #148]	; (80019a0 <SerialUpload+0xd4>)
  while(finished == 0){
 800190a:	4d26      	ldr	r5, [pc, #152]	; (80019a4 <SerialUpload+0xd8>)
    else{Serial_PutString("Erase failed");}
 800190c:	f7ff feca 	bl	80016a4 <Serial_PutString>
  if(SectorError ==  0xFFFFFFFFU){Serial_PutString("Flash erased successfully.\n"); }
 8001910:	9b02      	ldr	r3, [sp, #8]
 8001912:	3301      	adds	r3, #1
 8001914:	bf0c      	ite	eq
 8001916:	4824      	ldreq	r0, [pc, #144]	; (80019a8 <SerialUpload+0xdc>)
  	else {Serial_PutString("Error in erasing\r");}
 8001918:	4824      	ldrne	r0, [pc, #144]	; (80019ac <SerialUpload+0xe0>)
 800191a:	f7ff fec3 	bl	80016a4 <Serial_PutString>
  Serial_PutString("Starting to reprogram flash..\n");
 800191e:	4824      	ldr	r0, [pc, #144]	; (80019b0 <SerialUpload+0xe4>)
 8001920:	f7ff fec0 	bl	80016a4 <Serial_PutString>
  uint8_t nack = 19;
 8001924:	2313      	movs	r3, #19
 8001926:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t ack = 17;
 800192a:	2311      	movs	r3, #17
 800192c:	f88d 3006 	strb.w	r3, [sp, #6]
	  HAL_UART_Receive(&huart1, &data, 1, RX_TIMEOUT);
 8001930:	f04f 33ff 	mov.w	r3, #4294967295
 8001934:	2201      	movs	r2, #1
 8001936:	f10d 0107 	add.w	r1, sp, #7
 800193a:	4819      	ldr	r0, [pc, #100]	; (80019a0 <SerialUpload+0xd4>)
 800193c:	f7ff fe51 	bl	80015e2 <HAL_UART_Receive>
	  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddr, data);
 8001940:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001944:	2300      	movs	r3, #0
 8001946:	4621      	mov	r1, r4
 8001948:	2000      	movs	r0, #0
 800194a:	f7fe ff91 	bl	8000870 <HAL_FLASH_Program>

	  if(status ==  HAL_OK){
 800194e:	b998      	cbnz	r0, 8001978 <SerialUpload+0xac>
		  //Serial_PutString("Successfully programmed!\n");
		  flashAddr++;
		  HAL_UART_Transmit(&huart1, &ack, 1, TX_TIMEOUT);
 8001950:	f04f 33ff 	mov.w	r3, #4294967295
 8001954:	2201      	movs	r2, #1
 8001956:	f10d 0106 	add.w	r1, sp, #6
 800195a:	4630      	mov	r0, r6
 800195c:	f7ff fde4 	bl	8001528 <HAL_UART_Transmit>
		  flashAddr++;
 8001960:	3401      	adds	r4, #1
		  HAL_Delay(10);
 8001962:	200a      	movs	r0, #10
 8001964:	f7fe fe10 	bl	8000588 <HAL_Delay>
  while(finished == 0){
 8001968:	42ac      	cmp	r4, r5
 800196a:	d1e1      	bne.n	8001930 <SerialUpload+0x64>
  }

  //uint8_t *result=(uint8_t *)APPLICATION_ADDRESS;
  //if(*result== data){Serial_PutString("Klapip\n");}

  HAL_FLASH_Lock();
 800196c:	f7fe ff30 	bl	80007d0 <HAL_FLASH_Lock>

}
 8001970:	b008      	add	sp, #32
 8001972:	bd70      	pop	{r4, r5, r6, pc}
    else{Serial_PutString("Erase failed");}
 8001974:	480f      	ldr	r0, [pc, #60]	; (80019b4 <SerialUpload+0xe8>)
 8001976:	e7c6      	b.n	8001906 <SerialUpload+0x3a>
		  Serial_PutString("Programming failed\n");
 8001978:	480f      	ldr	r0, [pc, #60]	; (80019b8 <SerialUpload+0xec>)
 800197a:	f7ff fe93 	bl	80016a4 <Serial_PutString>
		  HAL_UART_Transmit(&huart1, &nack, 1, TX_TIMEOUT);
 800197e:	f04f 33ff 	mov.w	r3, #4294967295
 8001982:	2201      	movs	r2, #1
 8001984:	f10d 0105 	add.w	r1, sp, #5
 8001988:	4805      	ldr	r0, [pc, #20]	; (80019a0 <SerialUpload+0xd4>)
 800198a:	f7ff fdcd 	bl	8001528 <HAL_UART_Transmit>
 800198e:	e7ed      	b.n	800196c <SerialUpload+0xa0>
 8001990:	0800222f 	.word	0x0800222f
 8001994:	40023c00 	.word	0x40023c00
 8001998:	08002240 	.word	0x08002240
 800199c:	0800c000 	.word	0x0800c000
 80019a0:	20000060 	.word	0x20000060
 80019a4:	0800d548 	.word	0x0800d548
 80019a8:	08002263 	.word	0x08002263
 80019ac:	0800227f 	.word	0x0800227f
 80019b0:	08002291 	.word	0x08002291
 80019b4:	08002256 	.word	0x08002256
 80019b8:	080022b0 	.word	0x080022b0

080019bc <SerialDownload>:
  * @brief  Download a file from flash via serial port.
  * @param  None
  * @retval None
  */
void SerialDownload(void)
{
 80019bc:	b508      	push	{r3, lr}
  Serial_PutString("\n\n\rSelect Receive File\n\r");
 80019be:	4806      	ldr	r0, [pc, #24]	; (80019d8 <SerialDownload+0x1c>)
 80019c0:	f7ff fe70 	bl	80016a4 <Serial_PutString>
  //uint8_t result = *(__IO uint32_t *)APPLICATION_ADDRESS;
  const volatile uint8_t *result=(const volatile uint8_t *)APPLICATION_ADDRESS;
  if(*result== 0xFD){Serial_PutString("Klapip");}
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <SerialDownload+0x20>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2bfd      	cmp	r3, #253	; 0xfd
 80019ca:	bf0c      	ite	eq
 80019cc:	4804      	ldreq	r0, [pc, #16]	; (80019e0 <SerialDownload+0x24>)
  else{Serial_PutString("Ei klapi");  }
 80019ce:	4805      	ldrne	r0, [pc, #20]	; (80019e4 <SerialDownload+0x28>)


}
 80019d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else{Serial_PutString("Ei klapi");  }
 80019d4:	f7ff be66 	b.w	80016a4 <Serial_PutString>
 80019d8:	08002206 	.word	0x08002206
 80019dc:	0800c000 	.word	0x0800c000
 80019e0:	0800221f 	.word	0x0800221f
 80019e4:	08002226 	.word	0x08002226

080019e8 <FLASH_Init>:

void FLASH_Init(void){
 80019e8:	b508      	push	{r3, lr}
  /* Unlock the Program memory */
  HAL_FLASH_Unlock();
 80019ea:	f7fe fedf 	bl	80007ac <HAL_FLASH_Unlock>
  /* Clear all FLASH flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_OPERR |
 80019ee:	4b03      	ldr	r3, [pc, #12]	; (80019fc <FLASH_Init+0x14>)
 80019f0:	22f2      	movs	r2, #242	; 0xf2
 80019f2:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR );
  /* Unlock the Program memory */
  HAL_FLASH_Lock();
}
 80019f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_FLASH_Lock();
 80019f8:	f7fe beea 	b.w	80007d0 <HAL_FLASH_Lock>
 80019fc:	40023c00 	.word	0x40023c00

08001a00 <Main_Menu>:
  * @brief  Display the Main Menu on HyperTerminal
  * @param  None
  * @retval None
  */
void Main_Menu(void)
{
 8001a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
	FLASH_Init();
 8001a06:	f7ff ffef 	bl	80019e8 <FLASH_Init>

  uint8_t key = 0;
 8001a0a:	2300      	movs	r3, #0


  Serial_PutString("\r\n======================================================================");
 8001a0c:	4846      	ldr	r0, [pc, #280]	; (8001b28 <Main_Menu+0x128>)
  uint8_t key = 0;
 8001a0e:	70fb      	strb	r3, [r7, #3]
  Serial_PutString("\r\n======================================================================");
 8001a10:	f7ff fe48 	bl	80016a4 <Serial_PutString>
  Serial_PutString("\r\n=              (C) COPYRIGHT 2015 STMicroelectronics                 =");
 8001a14:	4845      	ldr	r0, [pc, #276]	; (8001b2c <Main_Menu+0x12c>)
  while (1)
  {
	/* Test if any sector of Flash memory where user application will be loaded is write protected */
	HAL_FLASH_OB_Unlock();
	HAL_FLASHEx_OBGetConfig(&pOBInit);
	FlashProtection = pOBInit.WRPState;
 8001a16:	4d46      	ldr	r5, [pc, #280]	; (8001b30 <Main_Menu+0x130>)
  Serial_PutString("\r\n=              (C) COPYRIGHT 2015 STMicroelectronics                 =");
 8001a18:	f7ff fe44 	bl	80016a4 <Serial_PutString>
  Serial_PutString("\r\n=                                                                    =");
 8001a1c:	4845      	ldr	r0, [pc, #276]	; (8001b34 <Main_Menu+0x134>)
 8001a1e:	f7ff fe41 	bl	80016a4 <Serial_PutString>
  Serial_PutString("\r\n=  STM32L0xx In-Application Programming Application  (Version 1.0.0) =");
 8001a22:	4845      	ldr	r0, [pc, #276]	; (8001b38 <Main_Menu+0x138>)
 8001a24:	f7ff fe3e 	bl	80016a4 <Serial_PutString>
  Serial_PutString("\r\n=                                                                    =");
 8001a28:	4842      	ldr	r0, [pc, #264]	; (8001b34 <Main_Menu+0x134>)
 8001a2a:	f7ff fe3b 	bl	80016a4 <Serial_PutString>
  Serial_PutString("\r\n=                                   By MCD Application Team          =");
 8001a2e:	4843      	ldr	r0, [pc, #268]	; (8001b3c <Main_Menu+0x13c>)
 8001a30:	f7ff fe38 	bl	80016a4 <Serial_PutString>
  Serial_PutString("\r\n======================================================================");
 8001a34:	483c      	ldr	r0, [pc, #240]	; (8001b28 <Main_Menu+0x128>)
 8001a36:	f7ff fe35 	bl	80016a4 <Serial_PutString>
  Serial_PutString("\r\n\r\n");
 8001a3a:	4841      	ldr	r0, [pc, #260]	; (8001b40 <Main_Menu+0x140>)
 8001a3c:	f7ff fe32 	bl	80016a4 <Serial_PutString>
 8001a40:	462e      	mov	r6, r5
	HAL_FLASHEx_OBGetConfig(&pOBInit);
 8001a42:	4c40      	ldr	r4, [pc, #256]	; (8001b44 <Main_Menu+0x144>)
	HAL_FLASH_OB_Unlock();
 8001a44:	f7fe fece 	bl	80007e4 <HAL_FLASH_OB_Unlock>
	HAL_FLASHEx_OBGetConfig(&pOBInit);
 8001a48:	4620      	mov	r0, r4
 8001a4a:	f7fe ffd3 	bl	80009f4 <HAL_FLASHEx_OBGetConfig>
	FlashProtection = pOBInit.WRPState;
 8001a4e:	6863      	ldr	r3, [r4, #4]
 8001a50:	602b      	str	r3, [r5, #0]
	HAL_FLASH_OB_Lock();
 8001a52:	f7fe fed9 	bl	8000808 <HAL_FLASH_OB_Lock>

    Serial_PutString("\r\n=================== Main Menu ============================\r\n\n");
 8001a56:	483c      	ldr	r0, [pc, #240]	; (8001b48 <Main_Menu+0x148>)
 8001a58:	f7ff fe24 	bl	80016a4 <Serial_PutString>
    Serial_PutString("  Upload image to the internal Flash ----------------- 1\r\n\n");
 8001a5c:	483b      	ldr	r0, [pc, #236]	; (8001b4c <Main_Menu+0x14c>)
 8001a5e:	f7ff fe21 	bl	80016a4 <Serial_PutString>
    Serial_PutString("  Get image from the internal Flash ----------------- 2\r\n\n");
 8001a62:	483b      	ldr	r0, [pc, #236]	; (8001b50 <Main_Menu+0x150>)
 8001a64:	f7ff fe1e 	bl	80016a4 <Serial_PutString>
    Serial_PutString("  Execute the loaded application ----------------------- 3\r\n\n");
 8001a68:	483a      	ldr	r0, [pc, #232]	; (8001b54 <Main_Menu+0x154>)
 8001a6a:	f7ff fe1b 	bl	80016a4 <Serial_PutString>

    if(FlashProtection != OB_WRPSTATE_DISABLE )
 8001a6e:	682b      	ldr	r3, [r5, #0]
 8001a70:	b1eb      	cbz	r3, 8001aae <Main_Menu+0xae>
    {
      Serial_PutString("  Disable the write protection ------------------------- 4\r\n\n");
 8001a72:	4839      	ldr	r0, [pc, #228]	; (8001b58 <Main_Menu+0x158>)
    }
    else
    {
      Serial_PutString("  Enable the write protection -------------------------- 4\r\n\n");
 8001a74:	f7ff fe16 	bl	80016a4 <Serial_PutString>
    }
    Serial_PutString("==========================================================\r\n\n");
 8001a78:	4838      	ldr	r0, [pc, #224]	; (8001b5c <Main_Menu+0x15c>)
 8001a7a:	f7ff fe13 	bl	80016a4 <Serial_PutString>

    /* Clean the input path */
    __HAL_UART_FLUSH_DRREGISTER(&huart1);
 8001a7e:	4838      	ldr	r0, [pc, #224]	; (8001b60 <Main_Menu+0x160>)
 8001a80:	6803      	ldr	r3, [r0, #0]
 8001a82:	685a      	ldr	r2, [r3, #4]
    __HAL_UART_CLEAR_OREFLAG(&huart1);
 8001a84:	2200      	movs	r2, #0
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	607a      	str	r2, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
	
    /* Receive key */
    HAL_UART_Receive(&huart1, &key, 1, RX_TIMEOUT);
 8001a92:	2201      	movs	r2, #1
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295
 8001a98:	1cf9      	adds	r1, r7, #3
 8001a9a:	f7ff fda2 	bl	80015e2 <HAL_UART_Receive>

    switch (key)
 8001a9e:	78fb      	ldrb	r3, [r7, #3]
 8001aa0:	3b31      	subs	r3, #49	; 0x31
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d83d      	bhi.n	8001b22 <Main_Menu+0x122>
 8001aa6:	e8df f003 	tbb	[pc, r3]
 8001aaa:	0407      	.short	0x0407
 8001aac:	170a      	.short	0x170a
      Serial_PutString("  Enable the write protection -------------------------- 4\r\n\n");
 8001aae:	482d      	ldr	r0, [pc, #180]	; (8001b64 <Main_Menu+0x164>)
 8001ab0:	e7e0      	b.n	8001a74 <Main_Menu+0x74>
    {
    case '2' :
      /* Download user application from the Flash */
      SerialDownload();
 8001ab2:	f7ff ff83 	bl	80019bc <SerialDownload>
      break;
 8001ab6:	e7c4      	b.n	8001a42 <Main_Menu+0x42>
    case '1' :
      /* Upload user application into the Flash */
      SerialUpload();
 8001ab8:	f7ff ff08 	bl	80018cc <SerialUpload>
      break;
 8001abc:	e7c1      	b.n	8001a42 <Main_Menu+0x42>
    case '3' :
      Serial_PutString("Start program execution......\r\n\n");
 8001abe:	482a      	ldr	r0, [pc, #168]	; (8001b68 <Main_Menu+0x168>)
 8001ac0:	f7ff fdf0 	bl	80016a4 <Serial_PutString>

      	pFunction appEntry;
      	uint32_t appStack;

        /* Get the application stack pointer (First entry in the application vector table) */
      	appStack = (uint32_t) *((__IO uint32_t*)APPLICATION_ADDRESS);
 8001ac4:	4b29      	ldr	r3, [pc, #164]	; (8001b6c <Main_Menu+0x16c>)

      	/* Get the application entry point (Second entry in the application vector table) */
      	appEntry = (pFunction) *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);

      	/* Reconfigure vector table offset register to match the application location */
      	SCB->VTOR = APPLICATION_ADDRESS;
 8001ac6:	482a      	ldr	r0, [pc, #168]	; (8001b70 <Main_Menu+0x170>)
      	appEntry = (pFunction) *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8001ac8:	4a2a      	ldr	r2, [pc, #168]	; (8001b74 <Main_Menu+0x174>)
      	appStack = (uint32_t) *((__IO uint32_t*)APPLICATION_ADDRESS);
 8001aca:	6819      	ldr	r1, [r3, #0]
      	appEntry = (pFunction) *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8001acc:	6812      	ldr	r2, [r2, #0]
      	SCB->VTOR = APPLICATION_ADDRESS;
 8001ace:	6083      	str	r3, [r0, #8]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 8001ad0:	f381 8808 	msr	MSP, r1

      	/* Set the application stack pointer */
      	__set_MSP(appStack);

      	/* Start the application */
      	appEntry();
 8001ad4:	4790      	blx	r2

      break;
 8001ad6:	e7b4      	b.n	8001a42 <Main_Menu+0x42>
    case '4' :


      if (FlashProtection != OB_WRPSTATE_DISABLE)      {
 8001ad8:	6833      	ldr	r3, [r6, #0]
 8001ada:	b1b3      	cbz	r3, 8001b0a <Main_Menu+0x10a>
    	HAL_FLASH_OB_Unlock();
 8001adc:	f7fe fe82 	bl	80007e4 <HAL_FLASH_OB_Unlock>
        /* Disable the write protection */
    	pOBInit.WRPState=OB_WRPSTATE_DISABLE;
 8001ae0:	2300      	movs	r3, #0

        if (HAL_FLASHEx_OBProgram(&pOBInit) == HAL_OK)
 8001ae2:	4818      	ldr	r0, [pc, #96]	; (8001b44 <Main_Menu+0x144>)
    	pOBInit.WRPState=OB_WRPSTATE_DISABLE;
 8001ae4:	6063      	str	r3, [r4, #4]
        if (HAL_FLASHEx_OBProgram(&pOBInit) == HAL_OK)
 8001ae6:	f7fe ff29 	bl	800093c <HAL_FLASHEx_OBProgram>
 8001aea:	b950      	cbnz	r0, 8001b02 <Main_Menu+0x102>
        {
          Serial_PutString("Write Protection disabled...\r\n");
 8001aec:	4822      	ldr	r0, [pc, #136]	; (8001b78 <Main_Menu+0x178>)
      else      {
    	HAL_FLASH_OB_Unlock();
    	pOBInit.WRPState=OB_WRPSTATE_ENABLE;
        if (HAL_FLASHEx_OBProgram(&pOBInit) == HAL_OK)
        {
          Serial_PutString("Write Protection enabled...\r\n");
 8001aee:	f7ff fdd9 	bl	80016a4 <Serial_PutString>
          Serial_PutString("System will now restart...\r\n");
 8001af2:	4822      	ldr	r0, [pc, #136]	; (8001b7c <Main_Menu+0x17c>)
 8001af4:	f7ff fdd6 	bl	80016a4 <Serial_PutString>
          /* Launch the option byte loading */
          HAL_FLASH_OB_Launch();
 8001af8:	f7fe ff02 	bl	8000900 <HAL_FLASH_OB_Launch>
          HAL_FLASH_OB_Lock();
 8001afc:	f7fe fe84 	bl	8000808 <HAL_FLASH_OB_Lock>
 8001b00:	e79f      	b.n	8001a42 <Main_Menu+0x42>
          Serial_PutString("Error: Flash write un-protection failed...\r\n");
 8001b02:	481f      	ldr	r0, [pc, #124]	; (8001b80 <Main_Menu+0x180>)
        }
      }

      break;
	default:
	Serial_PutString("Invalid Number ! ==> The number should be either 1, 2, 3 or 4\r");
 8001b04:	f7ff fdce 	bl	80016a4 <Serial_PutString>
	break;
 8001b08:	e79b      	b.n	8001a42 <Main_Menu+0x42>
    	HAL_FLASH_OB_Unlock();
 8001b0a:	f7fe fe6b 	bl	80007e4 <HAL_FLASH_OB_Unlock>
    	pOBInit.WRPState=OB_WRPSTATE_ENABLE;
 8001b0e:	2301      	movs	r3, #1
        if (HAL_FLASHEx_OBProgram(&pOBInit) == HAL_OK)
 8001b10:	480c      	ldr	r0, [pc, #48]	; (8001b44 <Main_Menu+0x144>)
    	pOBInit.WRPState=OB_WRPSTATE_ENABLE;
 8001b12:	6063      	str	r3, [r4, #4]
        if (HAL_FLASHEx_OBProgram(&pOBInit) == HAL_OK)
 8001b14:	f7fe ff12 	bl	800093c <HAL_FLASHEx_OBProgram>
 8001b18:	b908      	cbnz	r0, 8001b1e <Main_Menu+0x11e>
          Serial_PutString("Write Protection enabled...\r\n");
 8001b1a:	481a      	ldr	r0, [pc, #104]	; (8001b84 <Main_Menu+0x184>)
 8001b1c:	e7e7      	b.n	8001aee <Main_Menu+0xee>
          Serial_PutString("Error: Flash write protection failed...\r\n");
 8001b1e:	481a      	ldr	r0, [pc, #104]	; (8001b88 <Main_Menu+0x188>)
 8001b20:	e7f0      	b.n	8001b04 <Main_Menu+0x104>
	Serial_PutString("Invalid Number ! ==> The number should be either 1, 2, 3 or 4\r");
 8001b22:	481a      	ldr	r0, [pc, #104]	; (8001b8c <Main_Menu+0x18c>)
 8001b24:	e7ee      	b.n	8001b04 <Main_Menu+0x104>
 8001b26:	bf00      	nop
 8001b28:	08001dd4 	.word	0x08001dd4
 8001b2c:	08001e1d 	.word	0x08001e1d
 8001b30:	20000008 	.word	0x20000008
 8001b34:	08001e66 	.word	0x08001e66
 8001b38:	08001eaf 	.word	0x08001eaf
 8001b3c:	08001ef8 	.word	0x08001ef8
 8001b40:	08001f41 	.word	0x08001f41
 8001b44:	200000a0 	.word	0x200000a0
 8001b48:	08001f46 	.word	0x08001f46
 8001b4c:	08001f86 	.word	0x08001f86
 8001b50:	08001fc2 	.word	0x08001fc2
 8001b54:	08001ffd 	.word	0x08001ffd
 8001b58:	0800203b 	.word	0x0800203b
 8001b5c:	080020b7 	.word	0x080020b7
 8001b60:	20000060 	.word	0x20000060
 8001b64:	08002079 	.word	0x08002079
 8001b68:	080020f5 	.word	0x080020f5
 8001b6c:	0800c000 	.word	0x0800c000
 8001b70:	e000ed00 	.word	0xe000ed00
 8001b74:	0800c004 	.word	0x0800c004
 8001b78:	08002116 	.word	0x08002116
 8001b7c:	08002135 	.word	0x08002135
 8001b80:	08002152 	.word	0x08002152
 8001b84:	0800217f 	.word	0x0800217f
 8001b88:	0800219d 	.word	0x0800219d
 8001b8c:	080021c7 	.word	0x080021c7

08001b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b92:	2007      	movs	r0, #7
 8001b94:	f7fe fd0c 	bl	80005b0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	f06f 000b 	mvn.w	r0, #11
 8001ba0:	f7fe fd18 	bl	80005d4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	f06f 000a 	mvn.w	r0, #10
 8001bac:	f7fe fd12 	bl	80005d4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	f06f 0009 	mvn.w	r0, #9
 8001bb8:	f7fe fd0c 	bl	80005d4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	f06f 0004 	mvn.w	r0, #4
 8001bc4:	f7fe fd06 	bl	80005d4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	4611      	mov	r1, r2
 8001bcc:	f06f 0003 	mvn.w	r0, #3
 8001bd0:	f7fe fd00 	bl	80005d4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	f06f 0001 	mvn.w	r0, #1
 8001bdc:	f7fe fcfa 	bl	80005d4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001be0:	2200      	movs	r2, #0
 8001be2:	4611      	mov	r1, r2
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001bec:	f7fe bcf2 	b.w	80005d4 <HAL_NVIC_SetPriority>

08001bf0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{

  if(hcrc->Instance==CRC)
 8001bf0:	6802      	ldr	r2, [r0, #0]
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <HAL_CRC_MspInit+0x28>)
 8001bf4:	429a      	cmp	r2, r3
{
 8001bf6:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001bf8:	d10b      	bne.n	8001c12 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	9301      	str	r3, [sp, #4]
 8001bfe:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <HAL_CRC_MspInit+0x2c>)
 8001c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001c06:	631a      	str	r2, [r3, #48]	; 0x30
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c0e:	9301      	str	r3, [sp, #4]
 8001c10:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001c12:	b002      	add	sp, #8
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40023000 	.word	0x40023000
 8001c1c:	40023800 	.word	0x40023800

08001c20 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8001c22:	6802      	ldr	r2, [r0, #0]
 8001c24:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_UART_MspInit+0x48>)
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d11a      	bne.n	8001c60 <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <HAL_UART_MspInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c30:	480f      	ldr	r0, [pc, #60]	; (8001c70 <HAL_UART_MspInit+0x50>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c34:	f042 0210 	orr.w	r2, r2, #16
 8001c38:	645a      	str	r2, [r3, #68]	; 0x44
 8001c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3c:	f003 0310 	and.w	r3, r3, #16
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c44:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c48:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c52:	2303      	movs	r3, #3
 8001c54:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c56:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c58:	2307      	movs	r3, #7
 8001c5a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5c:	f7fe ff8e 	bl	8000b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c60:	b007      	add	sp, #28
 8001c62:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c66:	bf00      	nop
 8001c68:	40011000 	.word	0x40011000
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40020000 	.word	0x40020000

08001c74 <SVC_Handler>:
 8001c74:	4770      	bx	lr

08001c76 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001c76:	4770      	bx	lr

08001c78 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001c78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c7a:	f7fe fc73 	bl	8000564 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001c82:	f7fe bd0a 	b.w	800069a <HAL_SYSTICK_IRQHandler>
	...

08001c88 <EXTI0_IRQHandler>:
* @brief This function handles EXTI line0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_0)){
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <EXTI0_IRQHandler+0x1c>)
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	07db      	lsls	r3, r3, #31
 8001c8e:	d506      	bpl.n	8001c9e <EXTI0_IRQHandler+0x16>
		kordaja++;
 8001c90:	4a05      	ldr	r2, [pc, #20]	; (8001ca8 <EXTI0_IRQHandler+0x20>)
 8001c92:	6813      	ldr	r3, [r2, #0]
 8001c94:	3301      	adds	r3, #1
 8001c96:	6013      	str	r3, [r2, #0]
		clicked = 1;
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <EXTI0_IRQHandler+0x24>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f7ff b856 	b.w	8000d50 <HAL_GPIO_EXTI_IRQHandler>
 8001ca4:	40013c00 	.word	0x40013c00
 8001ca8:	2000000c 	.word	0x2000000c
 8001cac:	20000030 	.word	0x20000030

08001cb0 <get_kordaja>:

  /* USER CODE END EXTI0_IRQn 1 */
}

/* USER CODE BEGIN 1 */
 int get_kordaja(void){ return kordaja; }
 8001cb0:	4b01      	ldr	r3, [pc, #4]	; (8001cb8 <get_kordaja+0x8>)
 8001cb2:	6818      	ldr	r0, [r3, #0]
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	2000000c 	.word	0x2000000c

08001cbc <get_clicked>:

 int get_clicked(){ return clicked; }
 8001cbc:	4b01      	ldr	r3, [pc, #4]	; (8001cc4 <get_clicked+0x8>)
 8001cbe:	6818      	ldr	r0, [r3, #0]
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000030 	.word	0x20000030

08001cc8 <reset_clicked>:
 void reset_clicked(){ clicked = 0; }
 8001cc8:	4b01      	ldr	r3, [pc, #4]	; (8001cd0 <reset_clicked+0x8>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	4770      	bx	lr
 8001cd0:	20000030 	.word	0x20000030

08001cd4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cd4:	490f      	ldr	r1, [pc, #60]	; (8001d14 <SystemInit+0x40>)
 8001cd6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001cda:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <SystemInit+0x44>)
 8001ce4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ce6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001ce8:	f042 0201 	orr.w	r2, r2, #1
 8001cec:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001cee:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001cf6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001cfa:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001cfc:	4a07      	ldr	r2, [pc, #28]	; (8001d1c <SystemInit+0x48>)
 8001cfe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d06:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001d08:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001d0e:	608b      	str	r3, [r1, #8]
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000ed00 	.word	0xe000ed00
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	24003010 	.word	0x24003010

08001d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d58 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d26:	e003      	b.n	8001d30 <LoopCopyDataInit>

08001d28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d2e:	3104      	adds	r1, #4

08001d30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d30:	480b      	ldr	r0, [pc, #44]	; (8001d60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d32:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d38:	d3f6      	bcc.n	8001d28 <CopyDataInit>
  ldr  r2, =_sbss
 8001d3a:	4a0b      	ldr	r2, [pc, #44]	; (8001d68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d3c:	e002      	b.n	8001d44 <LoopFillZerobss>

08001d3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d40:	f842 3b04 	str.w	r3, [r2], #4

08001d44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d48:	d3f9      	bcc.n	8001d3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d4a:	f7ff ffc3 	bl	8001cd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d4e:	f000 f811 	bl	8001d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d52:	f7ff fd01 	bl	8001758 <main>
  bx  lr    
 8001d56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d58:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d5c:	080022ec 	.word	0x080022ec
  ldr  r0, =_sdata
 8001d60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d64:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8001d68:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8001d6c:	200000bc 	.word	0x200000bc

08001d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d70:	e7fe      	b.n	8001d70 <ADC_IRQHandler>
	...

08001d74 <__libc_init_array>:
 8001d74:	b570      	push	{r4, r5, r6, lr}
 8001d76:	4e0d      	ldr	r6, [pc, #52]	; (8001dac <__libc_init_array+0x38>)
 8001d78:	4c0d      	ldr	r4, [pc, #52]	; (8001db0 <__libc_init_array+0x3c>)
 8001d7a:	1ba4      	subs	r4, r4, r6
 8001d7c:	10a4      	asrs	r4, r4, #2
 8001d7e:	2500      	movs	r5, #0
 8001d80:	42a5      	cmp	r5, r4
 8001d82:	d109      	bne.n	8001d98 <__libc_init_array+0x24>
 8001d84:	4e0b      	ldr	r6, [pc, #44]	; (8001db4 <__libc_init_array+0x40>)
 8001d86:	4c0c      	ldr	r4, [pc, #48]	; (8001db8 <__libc_init_array+0x44>)
 8001d88:	f000 f818 	bl	8001dbc <_init>
 8001d8c:	1ba4      	subs	r4, r4, r6
 8001d8e:	10a4      	asrs	r4, r4, #2
 8001d90:	2500      	movs	r5, #0
 8001d92:	42a5      	cmp	r5, r4
 8001d94:	d105      	bne.n	8001da2 <__libc_init_array+0x2e>
 8001d96:	bd70      	pop	{r4, r5, r6, pc}
 8001d98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d9c:	4798      	blx	r3
 8001d9e:	3501      	adds	r5, #1
 8001da0:	e7ee      	b.n	8001d80 <__libc_init_array+0xc>
 8001da2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001da6:	4798      	blx	r3
 8001da8:	3501      	adds	r5, #1
 8001daa:	e7f2      	b.n	8001d92 <__libc_init_array+0x1e>
 8001dac:	080022e4 	.word	0x080022e4
 8001db0:	080022e4 	.word	0x080022e4
 8001db4:	080022e4 	.word	0x080022e4
 8001db8:	080022e8 	.word	0x080022e8

08001dbc <_init>:
 8001dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dbe:	bf00      	nop
 8001dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dc2:	bc08      	pop	{r3}
 8001dc4:	469e      	mov	lr, r3
 8001dc6:	4770      	bx	lr

08001dc8 <_fini>:
 8001dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dca:	bf00      	nop
 8001dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dce:	bc08      	pop	{r3}
 8001dd0:	469e      	mov	lr, r3
 8001dd2:	4770      	bx	lr
